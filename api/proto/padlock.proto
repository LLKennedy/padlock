syntax = "proto3";

package padlock;

option go_package = "github.com/LLKennedy/padlock/padlockpb";

import "tsjson.proto";
option (tsjson.npm_package) = "@llkdemo/padlock";
option (tsjson.import_path) = "padlock";

import "pkcs11.proto";
import "attributes.proto";
import "google/protobuf/empty.proto";

service ExposedPadlock {
	// Auth RPCs

	// PostHello initiates a session with the application, generating an authentication token
	rpc PostHello(AuthHello) returns (AuthToken);

	// Application RPCs

	// GetApplicationListModules lists modules already connected to the application
	rpc GetApplicationListModules(ApplicationListModulesRequest) returns (ApplicationListModulesResponse);
	// GetApplicationConnect connects a new module to the application
	rpc GetApplicationConnect(ApplicationConnectRequest) returns (stream ApplicationConnectUpdate);

	// Module RPCs

	// GetModuleListSlots lists the slots on a module
	rpc GetModuleListSlots(ModuleListSlotsRequest) returns (ModuleListSlotsResponse);
	// GetModuleInfo gets info for a specific module
	rpc GetModuleInfo(ModuleInfoRequest) returns (ModuleInfoResponse);

	// Slot RPCs

	// GetSlotListMechanisms lists the mechanisms available on a slot
	rpc GetSlotListMechanisms(SlotListMechanismsRequest) returns (SlotListMechanismsResponse);
	// PostSlotInitToken creates the token in the slot
	rpc PostSlotInitToken(SlotInitTokenRequest) returns (SlotInitTokenResponse);
	// GetSlotOpenSession creates a session on the slot
	rpc GetSlotOpenSession(SlotOpenSessionRequest) returns (stream SlotOpenSessionUpdate);

	// Session RPCs

	// PostSessionKeepalive keeps a session alive without taking any action agains the HSM itself
	rpc PostSessionKeepAlive(SessionID) returns (google.protobuf.Empty);
	// DeleteSessionClose closes the session
	rpc DeleteSessionClose(SessionCloseRequest) returns (SessionCloseResponse);
	// PutSessionLogin logs into the session at the application level
	rpc PutSessionLogin(SessionLoginRequest) returns (SessionLoginResponse);
	// PutSessionLogout logs out of the session at the application level
	rpc PutSessionLogout(SessionID) returns (SessionLogoutResponse);
	// GetSessionListObjects lists the objects available in the session
	rpc GetSessionListObjects(SessionListObjectsRequest) returns (stream P11Object);
	// PostSessionCreateObject creates an object
	rpc PostSessionCreateObject(SessionCreateObjectRequest) returns (P11Object);
	// PostSessionGenerateRandom generates random data, exercising the CSPRNG
	rpc PostSessionGenerateRandom(SessionGenerateRandomRequest) returns (SessionGenerateRandomResponse);
	// PostSessionGenerateKeyPair generates a keypair
	rpc PostSessionGenerateKeyPair(SessionGenerateKeyPairRequest) returns (SessionGenerateKeyPairResponse);
	// PostSessionGenerateKey generates a key
	rpc PostSessionGenerateKey(SessionGenerateKeyRequest) returns (SessionGenerateKeyResponse);

	// Object RPCs

	// GetObjectListAttributeValues lists values for the requested attributes
	rpc GetObjectListAttributeValues(ObjectListAttributeValuesRequest) returns (stream ObjectListAttributeValuesUpdate);
	// PostEncrypt encrypts data
	rpc PostEncrypt(ObjectEncryptRequest) returns (ObjectEncryptResponse);
	// PostEncryptSegmented encrypts multiple data segments individually then one final one, for those few mechanisms where it matters
	rpc PostEncryptSegmented(ObjectEncryptSegmentedRequest) returns (ObjectEncryptSegmentedResponse);
	// PostDecrypt decrypts data
	rpc PostDecrypt(ObjectDecryptRequest) returns (ObjectDecryptResponse);
	// PostDecryptSegmented decrypts multiple data segments individually then one final one, for those few mechanisms where it matters
	rpc PostDecryptSegmented(ObjectDecryptSegmentedRequest) returns (ObjectDecryptSegmentedResponse);
	// PostSign signs a message
	rpc PostSign(ObjectSignRequest) returns (ObjectSignResponse);
	// PostSignSegmented signs multiple data segments individually then one final part, for those few mechanisms where it matters
	rpc PostSignSegmented(ObjectSignSegmentedRequest) returns (ObjectSignSegmentedResponse);
	// PostVerify verifies a message and signature
	rpc PostVerify(ObjectVerifyRequest) returns (ObjectVerifyResponse);
	// PostVerifySegmented verifies multiple data segments individually then the final signature, for those  few mechanisms where it matters.
	rpc PostVerifySegmented(ObjectVerifySegmentedRequest) returns (ObjectVerifySegmentedResponse);
	// PutWrapKey wraps a key
	rpc PutWrapKey(ObjectWrapKeyRequest) returns (ObjectWrapKeyResponse);
	// PutUnwrapKey unwraps a key
	rpc PutUnwrapKey(ObjectUnwrapKeyRequest) returns (P11Object);
	// DeleteDestroyObject destroys an object
	rpc DeleteDestroyObject(ObjectDestroyObjectRequest) returns (ObjectDestroyObjectResponse);
	// PutCopyObject copies an object with new attributes if possible
	rpc PutCopyObject(ObjectCopyObjectRequest) returns (P11Object);
}

service Padlock {
	// Auth RPCs

	// Hello initiates a session with the application, generating an authentication token
	rpc Hello(AuthHello) returns (AuthToken);

	// Application RPCs

	// ApplicationListModules lists modules already connected to the application
	rpc ApplicationListModules(ApplicationListModulesRequest) returns (ApplicationListModulesResponse);
	// ApplicationConnect connects a new module to the application
	rpc ApplicationConnect(ApplicationConnectRequest) returns (stream ApplicationConnectUpdate);

	// Module RPCs

	// ModuleListSlots lists the slots on a module
	rpc ModuleListSlots(ModuleListSlotsRequest) returns (ModuleListSlotsResponse);
	// ModuleInfo gets info for a specific module
	rpc ModuleInfo(ModuleInfoRequest) returns (ModuleInfoResponse);

	// Slot RPCs

	// SlotListMechanisms lists the mechanisms available on a slot
	rpc SlotListMechanisms(SlotListMechanismsRequest) returns (SlotListMechanismsResponse);
	// SlotInitToken creates the token in the slot
	rpc SlotInitToken(SlotInitTokenRequest) returns (SlotInitTokenResponse);
	// SlotOpenSession creates a session on the slot
	rpc SlotOpenSession(SlotOpenSessionRequest) returns (stream SlotOpenSessionUpdate);

	// Session RPCs

	// SessionKeepalive keeps a session alive without taking any action agains the HSM itself
	rpc SessionKeepAlive(SessionID) returns (google.protobuf.Empty);
	// SessionClose closes the session
	rpc SessionClose(SessionCloseRequest) returns (SessionCloseResponse);
	// SessionLogin logs into the session at the application level
	rpc SessionLogin(SessionLoginRequest) returns (SessionLoginResponse);
	// SessionLogout logs out of the session at the application level
	rpc SessionLogout(SessionID) returns (SessionLogoutResponse);
	// SessionListObjects lists the objects available in the session
	rpc SessionListObjects(SessionListObjectsRequest) returns (stream P11Object);
	// SessionCreateObject creates an object
	rpc SessionCreateObject(SessionCreateObjectRequest) returns (P11Object);
	// SessionGenerateRandom generates random data, exercising the CSPRNG
	rpc SessionGenerateRandom(SessionGenerateRandomRequest) returns (SessionGenerateRandomResponse);
	// SessionGenerateKeyPair generates a keypair
	rpc SessionGenerateKeyPair(SessionGenerateKeyPairRequest) returns (SessionGenerateKeyPairResponse);
	// SessionGenerateKey generates a key
	rpc SessionGenerateKey(SessionGenerateKeyRequest) returns (SessionGenerateKeyResponse);

	// Object RPCs

	// ObjectListAttributeValues lists values for the requested attributes
	rpc ObjectListAttributeValues(ObjectListAttributeValuesRequest) returns (stream ObjectListAttributeValuesUpdate);
	// Encrypt encrypts data
	rpc Encrypt(ObjectEncryptRequest) returns (ObjectEncryptResponse);
	// EncryptSegmented encrypts multiple data segments individually then one final one, for those few mechanisms where it matters
	rpc EncryptSegmented(ObjectEncryptSegmentedRequest) returns (ObjectEncryptSegmentedResponse);
	// Decrypt decrypts data
	rpc Decrypt(ObjectDecryptRequest) returns (ObjectDecryptResponse);
	// DecryptSegmented decrypts multiple data segments individually then one final one, for those few mechanisms where it matters
	rpc DecryptSegmented(ObjectDecryptSegmentedRequest) returns (ObjectDecryptSegmentedResponse);
	// Sign signs a message
	rpc Sign(ObjectSignRequest) returns (ObjectSignResponse);
	// SignSegmented signs multiple data segments individually then one final part, for those few mechanisms where it matters
	rpc SignSegmented(ObjectSignSegmentedRequest) returns (ObjectSignSegmentedResponse);
	// Verify verifies a message and signature
	rpc Verify(ObjectVerifyRequest) returns (ObjectVerifyResponse);
	// VerifySegmented verifies multiple data segments individually then the final signature, for those  few mechanisms where it matters.
	rpc VerifySegmented(ObjectVerifySegmentedRequest) returns (ObjectVerifySegmentedResponse);
	// WrapKey wraps a key
	rpc WrapKey(ObjectWrapKeyRequest) returns (ObjectWrapKeyResponse);
	// UnwrapKey unwraps a key
	rpc UnwrapKey(ObjectUnwrapKeyRequest) returns (P11Object);
	// DestroyObject destroys an object
	rpc DestroyObject(ObjectDestroyObjectRequest) returns (ObjectDestroyObjectResponse);
	// CopyObject copies an object with new attributes if possible
	rpc CopyObject(ObjectCopyObjectRequest) returns (P11Object);
}

message AuthHello {

}

message AuthToken {
	bytes data = 1;
}

message ApplicationListModulesRequest {
	AuthToken auth = 1;
}

message ApplicationListModulesResponse {
	map<string, ModuleInfo> modules = 1;
}

message ApplicationConnectRequest {
	AuthToken auth = 1;
	string module = 2;
}

message ApplicationConnectUpdate {
	oneof update {
		ModuleInfo info = 1;
		ModuleListSlotsResponse changed_slots = 2;
	}
}

message ModuleInfoRequest {
	AuthToken auth = 1;
	string module = 2;
}

message ModuleInfoResponse {
	ModuleInfo info = 1;
}

message ModuleListSlotsRequest {
	AuthToken auth = 1;
	string module = 2;
}

message ModuleListSlotsResponse {
	repeated SlotInfo slots = 1;
}

message SlotID {
	AuthToken auth = 1;
	string module = 2;
	uint64 slot = 3;
}

message SlotListMechanismsRequest {
	SlotID id = 1;
}

message SlotListMechanismsResponse {
	repeated Mechanism mechanisms = 1;
}

message SlotInitTokenRequest {
	SlotID id = 1;
	string security_officer_pin = 2;
	string token_label = 3;
}

message SlotInitTokenResponse {

}

message SlotOpenSessionRequest {
	SlotID id = 1;
	bool write_session = 2;
}

message SlotOpenSessionUpdate {
	oneof update {
		// First response must be this UUID
		string uuid = 1;
		// Further responses must not be UUID
		bool logged_in = 2;
	}
}

message SessionID {
	AuthToken auth = 1;
	string uuid = 2;
}

message SessionCloseRequest {
	SessionID id = 1;
}

message SessionCloseResponse {

}

message SessionLoginRequest {
	SessionID id = 1;
	string pin = 2;
	bool login_as_security_officer = 3;
}

message SessionLoginResponse {

}

message SessionLogoutResponse {

}

message SessionListObjectsRequest {
	SessionID id = 1;
	repeated Attribute template = 2;
}

message SessionCreateObjectRequest {
	SessionID id = 1;
	repeated Attribute attributes = 2;
}

message SessionGenerateRandomRequest {
	SessionID id = 1;
	uint32 length = 2;
}

message SessionGenerateRandomResponse {
	bytes data = 1;
}

message SessionGenerateKeyPairRequest {
	SessionID id = 1;
}

message SessionGenerateKeyPairResponse {}

message SessionGenerateKeyRequest {
	SessionID id = 1;
}

message SessionGenerateKeyResponse {}

message ObjectListAttributeValuesRequest {
	SessionID session_id = 1;
	string object_id = 2;
	repeated AttributeType requested_attributes = 3;
}

message ObjectListAttributeValuesUpdate {
	oneof update {
		Attribute attribute = 1;
		AttributeType not_found = 2;
	}
}

message ObjectEncryptRequest {}

message ObjectEncryptResponse {}

message ObjectEncryptSegmentedRequest {}

message ObjectEncryptSegmentedResponse {}

message ObjectDecryptRequest {}

message ObjectDecryptResponse {}

message ObjectDecryptSegmentedRequest {}

message ObjectDecryptSegmentedResponse {}

message ObjectSignRequest {}

message ObjectSignResponse {}

message ObjectSignSegmentedRequest {}

message ObjectSignSegmentedResponse {}

message ObjectVerifyRequest {}

message ObjectVerifyResponse {}

message ObjectVerifySegmentedRequest {}

message ObjectVerifySegmentedResponse {}

message ObjectWrapKeyRequest {}

message ObjectWrapKeyResponse {}

message ObjectUnwrapKeyRequest {}

message ObjectDestroyObjectRequest {}

message ObjectDestroyObjectResponse {}

message ObjectCopyObjectRequest {}

message ObjectCopyObjectResponse {}