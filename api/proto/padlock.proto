syntax = "proto3";

package padlock;

option go_package = "github.com/LLKennedy/padlock/padlockpb";

import "tsjson.proto";
option (tsjson.npm_package) = "@llkdemo/padlock";
option (tsjson.import_path) = "padlock";

import "pkcs11.proto";
import "attributes.proto";

service ExposedPadlock {
	// Auth RPCs

	// PostHello initiates a session with the application, generating an authentication token
	rpc PostHello(AuthHello) returns (AuthToken);

	// Application RPCs

	// GetApplicationListModules lists modules already connected to the application
	rpc GetApplicationListModules(ApplicationListModulesRequest) returns (ApplicationListModulesResponse);
	// PostApplicationConnect connects a new module to the application
	rpc PostApplicationConnect(ApplicationConnectRequest) returns (stream ApplicationConnectUpdate);

	// Module RPCs

	// GetModuleListSlots lists the slots on a module
	rpc GetModuleListSlots(ModuleListSlotsRequest) returns (ModuleListSlotsResponse);
	// GetModuleInfo gets info for a specific module
	rpc GetModuleInfo(ModuleInfoRequest) returns (ModuleInfoResponse);

	// Slot RPCs

	// GetSlotListMechanisms lists the mechanisms available on a slot
	rpc GetSlotListMechanisms(SlotListMechanismsRequest) returns (SlotListMechanismsResponse);
	// PostSlotInitToken creates the token in the slot
	rpc PostSlotInitToken(SlotInitTokenRequest) returns (SlotInitTokenResponse);
	// PostSlotOpenSession creates a session on the slot
	rpc PostSlotOpenSession(SlotOpenSessionRequest) returns (stream SlotOpenSessionUpdate);

	// Session RPCs

	// PutSessionLogin logs into the session at the application level
	rpc PutSessionLogin(SessionLoginRequest) returns (SessionLoginResponse);
	// PutSessionLogout logs out of the session at the application level
	rpc PutSessionLogout(SessionID) returns (SessionLogoutResponse);
	// GetSessionListObjects lists the objects available in the session
	rpc GetSessionListObjects(SessionListObjectsRequest) returns (stream P11Object);

	// Object RPCs

	// GetObjectListAttributeValues lists values for the requested attributes
	rpc GetObjectListAttributeValues(ObjectListAttributeValuesRequest) returns (stream Attribute);
}

service Padlock {
	// Auth RPCs

	// Hello initiates a session with the application, generating an authentication token
	rpc Hello(AuthHello) returns (AuthToken);

	// Application RPCs

	// ApplicationListModules lists modules already connected to the application
	rpc ApplicationListModules(ApplicationListModulesRequest) returns (ApplicationListModulesResponse);
	// ApplicationConnect connects a new module to the application
	rpc ApplicationConnect(ApplicationConnectRequest) returns (stream ApplicationConnectUpdate);

	// Module RPCs

	// ModuleListSlots lists the slots on a module
	rpc ModuleListSlots(ModuleListSlotsRequest) returns (ModuleListSlotsResponse);
	// ModuleInfo gets info for a specific module
	rpc ModuleInfo(ModuleInfoRequest) returns (ModuleInfoResponse);

	// Slot RPCs

	// SlotListMechanisms lists the mechanisms available on a slot
	rpc SlotListMechanisms(SlotListMechanismsRequest) returns (SlotListMechanismsResponse);
	// SlotInitToken creates the token in the slot
	rpc SlotInitToken(SlotInitTokenRequest) returns (SlotInitTokenResponse);
	// SlotOpenSession creates a session on the slot
	rpc SlotOpenSession(SlotOpenSessionRequest) returns (stream SlotOpenSessionUpdate);

	// Session RPCs

	// SessionLogin logs into the session at the application level
	rpc SessionLogin(SessionLoginRequest) returns (SessionLoginResponse);
	// SessionLogout logs out of the session at the application level
	rpc SessionLogout(SessionID) returns (SessionLogoutResponse);
	// SessionListObjects lists the objects available in the session
	rpc SessionListObjects(SessionListObjectsRequest) returns (stream P11Object);

	// Object RPCs

	// ObjectListAttributeValues lists values for the requested attributes
	rpc ObjectListAttributeValues(ObjectListAttributeValuesRequest) returns (stream Attribute);
}

message AuthHello {

}

message AuthToken {
	bytes data = 1;
}

message ApplicationListModulesRequest {
	AuthToken auth = 1;
}

message ApplicationListModulesResponse {
	map<string, ModuleInfo> modules = 1;
}

message ApplicationConnectRequest {
	AuthToken auth = 1;
	string module = 2;
}

message ApplicationConnectUpdate {
	oneof update {
		ModuleInfo info = 1;
		ModuleListSlotsResponse changed_slots = 2;
	}
}

message ModuleInfoRequest {
	AuthToken auth = 1;
	string module = 2;
}

message ModuleInfoResponse {
	ModuleInfo info = 1;
}

message ModuleListSlotsRequest {
	AuthToken auth = 1;
	string module = 2;
}

message ModuleListSlotsResponse {
	repeated SlotInfo slots = 1;
}

message SlotID {
	AuthToken auth = 1;
	string module = 2;
	uint64 slot = 3;
}

message SlotListMechanismsRequest {
	SlotID id = 1;
}

message SlotListMechanismsResponse {
	repeated Mechanism mechanisms = 1;
}

message SlotInitTokenRequest {
	SlotID id = 1;
	string security_officer_pin = 2;
	string token_label = 3;
}

message SlotInitTokenResponse {

}

message SlotOpenSessionRequest {
	SlotID id = 1;
	bool write_session = 2;
}

message SlotOpenSessionUpdate {
	oneof update {
		// First response must be this UUID
		string uuid = 2;
		// Further responses must not be UUID
		bool logged_in = 1;
	}
}

message SessionID {
	SlotID slot = 1;
	string uuid = 2;
}

message SessionLoginRequest {
	SlotID id = 1;
	string pin = 2;
	bool login_as_security_officer = 3;
}

message SessionLoginResponse {

}

message SessionLogoutResponse {

}

message SessionListObjectsRequest {
	repeated Attribute template = 1;
}

message ObjectID {
	SessionID session = 1;
	string uuid = 2;
}

message ObjectListAttributeValuesRequest {
	ObjectID id = 1;
	// True indicates it should be gathered before returning any other values
	repeated AttributeType requested_attributes = 2;
}