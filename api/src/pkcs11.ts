/**
 * Code generated by protoc-gen-tsjson. DO NOT EDIT.
 * versions:
 * 	protoc-gen-tsjson v0.5.0
 * 	protoc            v3.10.1
 * source: pkcs11.proto
 */

import * as tsjson from "@llkennedy/protoc-gen-tsjson";

/** A message */
export class Slot extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public SlotDescription?: string;
	/** A field */
	public ManufacturerID?: string;
	/** A field */
	public Flags?: number;
	/** A field */
	public HardwareVersion?: Version;
	/** A field */
	public FirmwareVersion?: Version;
	public ToProtoJSON(): Object {
		return {
			SlotDescription: tsjson.ToProtoJSON.String(this.SlotDescription),
			ManufacturerID: tsjson.ToProtoJSON.String(this.ManufacturerID),
			Flags: tsjson.ToProtoJSON.StringNumber(this.Flags),
			HardwareVersion: this.HardwareVersion?.ToProtoJSON(),
			FirmwareVersion: this.FirmwareVersion?.ToProtoJSON(),
		};
	}
	public static async Parse(data: any): Promise<Slot> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new Slot();
		res.SlotDescription = await tsjson.Parse.String(objData, "SlotDescription", "SlotDescription");
		res.ManufacturerID = await tsjson.Parse.String(objData, "ManufacturerID", "ManufacturerID");
		res.Flags = await tsjson.Parse.Number(objData, "Flags", "Flags");
		res.HardwareVersion = await tsjson.Parse.Message(objData, "HardwareVersion", "HardwareVersion", Version.Parse);
		res.FirmwareVersion = await tsjson.Parse.Message(objData, "FirmwareVersion", "FirmwareVersion", Version.Parse);
		return res;
	}
}

/** A message */
export class Version extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public Major?: number;
	/** A field */
	public Minor?: number;
	public ToProtoJSON(): Object {
		return {
			Major: tsjson.ToProtoJSON.Number(this.Major),
			Minor: tsjson.ToProtoJSON.Number(this.Minor),
		};
	}
	public static async Parse(data: any): Promise<Version> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new Version();
		res.Major = await tsjson.Parse.Number(objData, "Major", "Major");
		res.Minor = await tsjson.Parse.Number(objData, "Minor", "Minor");
		return res;
	}
}

