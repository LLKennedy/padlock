/**
 * Code generated by mercury. DO NOT EDIT.
 * versions:
 * 	mercury v0.9.7
 * 	protoc   v3.10.1
 * source: padlock.proto
 */

import * as mercury from "@llkennedy/mercury";
import { google } from "@llkennedy/protoc-gen-tsjson";
import { 
	SessionCloseRequest as padlock__SessionCloseRequest,
	ApplicationConnectUpdate as padlock__ApplicationConnectUpdate,
	SessionListObjectsRequest as padlock__SessionListObjectsRequest,
	ObjectWrapKeyResponse as padlock__ObjectWrapKeyResponse,
	ObjectDestroyObjectRequest as padlock__ObjectDestroyObjectRequest,
	ObjectEncryptResponse as padlock__ObjectEncryptResponse,
	ObjectDecryptRequest as padlock__ObjectDecryptRequest,
	ObjectDestroyObjectResponse as padlock__ObjectDestroyObjectResponse,
	ObjectVerifySegmentedRequest as padlock__ObjectVerifySegmentedRequest,
	ObjectEncryptSegmentedResponse as padlock__ObjectEncryptSegmentedResponse,
	SessionLogoutResponse as padlock__SessionLogoutResponse,
	ObjectWrapKeyRequest as padlock__ObjectWrapKeyRequest,
	ObjectDecryptSegmentedResponse as padlock__ObjectDecryptSegmentedResponse,
	ModuleListSlotsRequest as padlock__ModuleListSlotsRequest,
	SessionGenerateKeyPairResponse as padlock__SessionGenerateKeyPairResponse,
	SessionLoginResponse as padlock__SessionLoginResponse,
	SessionLoginRequest as padlock__SessionLoginRequest,
	SessionCloseResponse as padlock__SessionCloseResponse,
	SlotListMechanismsRequest as padlock__SlotListMechanismsRequest,
	ModuleListSlotsResponse as padlock__ModuleListSlotsResponse,
	ObjectVerifyRequest as padlock__ObjectVerifyRequest,
	ObjectCopyObjectRequest as padlock__ObjectCopyObjectRequest,
	ObjectSignSegmentedRequest as padlock__ObjectSignSegmentedRequest,
	ApplicationListModulesRequest as padlock__ApplicationListModulesRequest,
	SlotOpenSessionUpdate as padlock__SlotOpenSessionUpdate,
	SlotInitTokenResponse as padlock__SlotInitTokenResponse,
	ObjectEncryptRequest as padlock__ObjectEncryptRequest,
	SessionGenerateKeyRequest as padlock__SessionGenerateKeyRequest,
	SessionID as padlock__SessionID,
	SlotOpenSessionRequest as padlock__SlotOpenSessionRequest,
	AuthHello as padlock__AuthHello,
	SlotListMechanismsResponse as padlock__SlotListMechanismsResponse,
	ObjectSignResponse as padlock__ObjectSignResponse,
	ObjectUnwrapKeyRequest as padlock__ObjectUnwrapKeyRequest,
	SessionGenerateRandomResponse as padlock__SessionGenerateRandomResponse,
	ObjectListAttributeValuesRequest as padlock__ObjectListAttributeValuesRequest,
	ObjectSignSegmentedResponse as padlock__ObjectSignSegmentedResponse,
	ObjectDecryptResponse as padlock__ObjectDecryptResponse,
	ApplicationListModulesResponse as padlock__ApplicationListModulesResponse,
	ObjectDecryptSegmentedRequest as padlock__ObjectDecryptSegmentedRequest,
	SessionGenerateKeyPairRequest as padlock__SessionGenerateKeyPairRequest,
	ObjectListAttributeValuesUpdate as padlock__ObjectListAttributeValuesUpdate,
	ModuleInfoResponse as padlock__ModuleInfoResponse,
	AuthToken as padlock__AuthToken,
	ObjectSignRequest as padlock__ObjectSignRequest,
	ObjectVerifySegmentedResponse as padlock__ObjectVerifySegmentedResponse,
	SessionCreateObjectRequest as padlock__SessionCreateObjectRequest,
	SlotInitTokenRequest as padlock__SlotInitTokenRequest,
	ObjectEncryptSegmentedRequest as padlock__ObjectEncryptSegmentedRequest,
	ApplicationConnectRequest as padlock__ApplicationConnectRequest,
	SessionGenerateRandomRequest as padlock__SessionGenerateRandomRequest,
	ModuleInfoRequest as padlock__ModuleInfoRequest,
	ObjectVerifyResponse as padlock__ObjectVerifyResponse
} from "./padlock";
import { 
	P11Object as padlock__P11Object
} from "./pkcs11";

export class ExposedPadlockClient extends mercury.Client {
	constructor(basePath: string | undefined = "localhost/api/ExposedPadlock", useTLS: boolean | undefined = true, client: mercury.AxiosInstance | undefined = undefined) {
		super(basePath, useTLS, client);
	}
	public async Hello(req: padlock__AuthHello): Promise<padlock__AuthToken> {
		return this.SendUnary("Hello", mercury.HTTPMethod.POST, req, padlock__AuthToken.Parse);
	}
	public async ApplicationListModules(req: padlock__ApplicationListModulesRequest): Promise<padlock__ApplicationListModulesResponse> {
		return this.SendUnary("ApplicationListModules", mercury.HTTPMethod.GET, req, padlock__ApplicationListModulesResponse.Parse);
	}
	public async ApplicationConnect(req: padlock__ApplicationConnectRequest): Promise<mercury.ServerStream<padlock__ApplicationConnectRequest, padlock__ApplicationConnectUpdate>> {
		return this.StartServerStream<padlock__ApplicationConnectRequest, padlock__ApplicationConnectUpdate>("ApplicationConnect", req, padlock__ApplicationConnectUpdate.Parse);
	}
	public async ModuleListSlots(req: padlock__ModuleListSlotsRequest): Promise<padlock__ModuleListSlotsResponse> {
		return this.SendUnary("ModuleListSlots", mercury.HTTPMethod.GET, req, padlock__ModuleListSlotsResponse.Parse);
	}
	public async ModuleInfo(req: padlock__ModuleInfoRequest): Promise<padlock__ModuleInfoResponse> {
		return this.SendUnary("ModuleInfo", mercury.HTTPMethod.GET, req, padlock__ModuleInfoResponse.Parse);
	}
	public async SlotListMechanisms(req: padlock__SlotListMechanismsRequest): Promise<padlock__SlotListMechanismsResponse> {
		return this.SendUnary("SlotListMechanisms", mercury.HTTPMethod.GET, req, padlock__SlotListMechanismsResponse.Parse);
	}
	public async SlotInitToken(req: padlock__SlotInitTokenRequest): Promise<padlock__SlotInitTokenResponse> {
		return this.SendUnary("SlotInitToken", mercury.HTTPMethod.POST, req, padlock__SlotInitTokenResponse.Parse);
	}
	public async SlotOpenSession(req: padlock__SlotOpenSessionRequest): Promise<mercury.ServerStream<padlock__SlotOpenSessionRequest, padlock__SlotOpenSessionUpdate>> {
		return this.StartServerStream<padlock__SlotOpenSessionRequest, padlock__SlotOpenSessionUpdate>("SlotOpenSession", req, padlock__SlotOpenSessionUpdate.Parse);
	}
	public async SessionKeepAlive(req: padlock__SessionID): Promise<google.protobuf.Empty> {
		return this.SendUnary("SessionKeepAlive", mercury.HTTPMethod.POST, req, google.protobuf.Empty.Parse);
	}
	public async SessionClose(req: padlock__SessionCloseRequest): Promise<padlock__SessionCloseResponse> {
		return this.SendUnary("SessionClose", mercury.HTTPMethod.DELETE, req, padlock__SessionCloseResponse.Parse);
	}
	public async SessionLogin(req: padlock__SessionLoginRequest): Promise<padlock__SessionLoginResponse> {
		return this.SendUnary("SessionLogin", mercury.HTTPMethod.PUT, req, padlock__SessionLoginResponse.Parse);
	}
	public async SessionLogout(req: padlock__SessionID): Promise<padlock__SessionLogoutResponse> {
		return this.SendUnary("SessionLogout", mercury.HTTPMethod.PUT, req, padlock__SessionLogoutResponse.Parse);
	}
	public async SessionListObjects(req: padlock__SessionListObjectsRequest): Promise<mercury.ServerStream<padlock__SessionListObjectsRequest, padlock__P11Object>> {
		return this.StartServerStream<padlock__SessionListObjectsRequest, padlock__P11Object>("SessionListObjects", req, padlock__P11Object.Parse);
	}
	public async SessionCreateObject(req: padlock__SessionCreateObjectRequest): Promise<padlock__P11Object> {
		return this.SendUnary("SessionCreateObject", mercury.HTTPMethod.POST, req, padlock__P11Object.Parse);
	}
	public async SessionGenerateRandom(req: padlock__SessionGenerateRandomRequest): Promise<padlock__SessionGenerateRandomResponse> {
		return this.SendUnary("SessionGenerateRandom", mercury.HTTPMethod.POST, req, padlock__SessionGenerateRandomResponse.Parse);
	}
	public async SessionGenerateKeyPair(req: padlock__SessionGenerateKeyPairRequest): Promise<padlock__SessionGenerateKeyPairResponse> {
		return this.SendUnary("SessionGenerateKeyPair", mercury.HTTPMethod.POST, req, padlock__SessionGenerateKeyPairResponse.Parse);
	}
	public async SessionGenerateKey(req: padlock__SessionGenerateKeyRequest): Promise<padlock__P11Object> {
		return this.SendUnary("SessionGenerateKey", mercury.HTTPMethod.POST, req, padlock__P11Object.Parse);
	}
	public async ObjectListAttributeValues(req: padlock__ObjectListAttributeValuesRequest): Promise<mercury.ServerStream<padlock__ObjectListAttributeValuesRequest, padlock__ObjectListAttributeValuesUpdate>> {
		return this.StartServerStream<padlock__ObjectListAttributeValuesRequest, padlock__ObjectListAttributeValuesUpdate>("ObjectListAttributeValues", req, padlock__ObjectListAttributeValuesUpdate.Parse);
	}
	public async Encrypt(req: padlock__ObjectEncryptRequest): Promise<padlock__ObjectEncryptResponse> {
		return this.SendUnary("Encrypt", mercury.HTTPMethod.POST, req, padlock__ObjectEncryptResponse.Parse);
	}
	public async EncryptSegmented(): Promise<mercury.DualStream<padlock__ObjectEncryptSegmentedRequest, padlock__ObjectEncryptSegmentedResponse>> {
		return this.StartDualStream<padlock__ObjectEncryptSegmentedRequest, padlock__ObjectEncryptSegmentedResponse>("EncryptSegmented", padlock__ObjectEncryptSegmentedResponse.Parse);
	}
	public async Decrypt(req: padlock__ObjectDecryptRequest): Promise<padlock__ObjectDecryptResponse> {
		return this.SendUnary("Decrypt", mercury.HTTPMethod.POST, req, padlock__ObjectDecryptResponse.Parse);
	}
	public async DecryptSegmented(): Promise<mercury.DualStream<padlock__ObjectDecryptSegmentedRequest, padlock__ObjectDecryptSegmentedResponse>> {
		return this.StartDualStream<padlock__ObjectDecryptSegmentedRequest, padlock__ObjectDecryptSegmentedResponse>("DecryptSegmented", padlock__ObjectDecryptSegmentedResponse.Parse);
	}
	public async Sign(req: padlock__ObjectSignRequest): Promise<padlock__ObjectSignResponse> {
		return this.SendUnary("Sign", mercury.HTTPMethod.POST, req, padlock__ObjectSignResponse.Parse);
	}
	public async SignSegmented(): Promise<mercury.ClientStream<padlock__ObjectSignSegmentedRequest, padlock__ObjectSignSegmentedResponse>> {
		return this.StartClientStream<padlock__ObjectSignSegmentedRequest, padlock__ObjectSignSegmentedResponse>("SignSegmented", padlock__ObjectSignSegmentedResponse.Parse);
	}
	public async Verify(req: padlock__ObjectVerifyRequest): Promise<padlock__ObjectVerifyResponse> {
		return this.SendUnary("Verify", mercury.HTTPMethod.POST, req, padlock__ObjectVerifyResponse.Parse);
	}
	public async VerifySegmented(): Promise<mercury.ClientStream<padlock__ObjectVerifySegmentedRequest, padlock__ObjectVerifySegmentedResponse>> {
		return this.StartClientStream<padlock__ObjectVerifySegmentedRequest, padlock__ObjectVerifySegmentedResponse>("VerifySegmented", padlock__ObjectVerifySegmentedResponse.Parse);
	}
	public async WrapKey(req: padlock__ObjectWrapKeyRequest): Promise<padlock__ObjectWrapKeyResponse> {
		return this.SendUnary("WrapKey", mercury.HTTPMethod.PUT, req, padlock__ObjectWrapKeyResponse.Parse);
	}
	public async UnwrapKey(req: padlock__ObjectUnwrapKeyRequest): Promise<padlock__P11Object> {
		return this.SendUnary("UnwrapKey", mercury.HTTPMethod.PUT, req, padlock__P11Object.Parse);
	}
	public async DestroyObject(req: padlock__ObjectDestroyObjectRequest): Promise<padlock__ObjectDestroyObjectResponse> {
		return this.SendUnary("DestroyObject", mercury.HTTPMethod.DELETE, req, padlock__ObjectDestroyObjectResponse.Parse);
	}
	public async CopyObject(req: padlock__ObjectCopyObjectRequest): Promise<padlock__P11Object> {
		return this.SendUnary("CopyObject", mercury.HTTPMethod.PUT, req, padlock__P11Object.Parse);
	}
}
