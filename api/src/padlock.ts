/**
 * Code generated by protoc-gen-tsjson. DO NOT EDIT.
 * versions:
 * 	protoc-gen-tsjson v0.5.0
 * 	protoc            v3.10.1
 * source: padlock.proto
 */

import * as tsjson from "@llkennedy/protoc-gen-tsjson";
import { ModuleInfo as padlock__ModuleInfo, SlotInfo as padlock__SlotInfo } from "pkcs11";

/** A message */
export class AuthHello extends Object implements tsjson.ProtoJSONCompatible {
	public ToProtoJSON(): Object {
		return {
		};
	}
	public static async Parse(data: any): Promise<AuthHello> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new AuthHello();
		return res;
	}
}

/** A message */
export class AuthToken extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public data?: Uint8Array;
	public ToProtoJSON(): Object {
		return {
			data: tsjson.ToProtoJSON.Bytes(this.data),
		};
	}
	public static async Parse(data: any): Promise<AuthToken> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new AuthToken();
		res.data = await tsjson.Parse.Bytes(objData, "data", "data");
		return res;
	}
}

/** A message */
export class ApplicationListModulesRequest extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public auth?: AuthToken;
	public ToProtoJSON(): Object {
		return {
			auth: this.auth?.ToProtoJSON(),
		};
	}
	public static async Parse(data: any): Promise<ApplicationListModulesRequest> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new ApplicationListModulesRequest();
		res.auth = await tsjson.Parse.Message(objData, "auth", "auth", AuthToken.Parse);
		return res;
	}
}

/** A message */
export class ApplicationListModulesResponse extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public modules?: ReadonlyMap<string, padlock__ModuleInfo | null>;
	public ToProtoJSON(): Object {
		return {
			modules: tsjson.ToProtoJSON.Map(val => val?.ToProtoJSON(), this.modules),
		};
	}
	public static async Parse(data: any): Promise<ApplicationListModulesResponse> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new ApplicationListModulesResponse();
		res.modules = await tsjson.Parse.Map(objData, "modules", "modules", val => val, tsjson.Parse.Message({"value":val}, "value", "value", padlock__ModuleInfo.Parse));
		return res;
	}
}

/** A message */
export class ApplicationConnectRequest extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public auth?: AuthToken;
	/** A field */
	public module?: string;
	public ToProtoJSON(): Object {
		return {
			auth: this.auth?.ToProtoJSON(),
			module: tsjson.ToProtoJSON.String(this.module),
		};
	}
	public static async Parse(data: any): Promise<ApplicationConnectRequest> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new ApplicationConnectRequest();
		res.auth = await tsjson.Parse.Message(objData, "auth", "auth", AuthToken.Parse);
		res.module = await tsjson.Parse.String(objData, "module", "module");
		return res;
	}
}

/** A message */
export class ApplicationConnectUpdate extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public info?: padlock__ModuleInfo;
	/** A field */
	public loggedIn?: boolean;
	/** A field */
	public changedSlots?: ModuleListSlotsResponse;
	public ToProtoJSON(): Object {
		return {
			info: this.info?.ToProtoJSON(),
			loggedIn: tsjson.ToProtoJSON.Bool(this.loggedIn),
			changedSlots: this.changedSlots?.ToProtoJSON(),
		};
	}
	public static async Parse(data: any): Promise<ApplicationConnectUpdate> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new ApplicationConnectUpdate();
		res.info = await tsjson.Parse.Message(objData, "info", "info", padlock__ModuleInfo.Parse);
		res.loggedIn = await tsjson.Parse.Bool(objData, "loggedIn", "logged_in");
		res.changedSlots = await tsjson.Parse.Message(objData, "changedSlots", "changed_slots", ModuleListSlotsResponse.Parse);
		return res;
	}
}

/** A message */
export class ModuleInfoRequest extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public auth?: AuthToken;
	/** A field */
	public module?: string;
	public ToProtoJSON(): Object {
		return {
			auth: this.auth?.ToProtoJSON(),
			module: tsjson.ToProtoJSON.String(this.module),
		};
	}
	public static async Parse(data: any): Promise<ModuleInfoRequest> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new ModuleInfoRequest();
		res.auth = await tsjson.Parse.Message(objData, "auth", "auth", AuthToken.Parse);
		res.module = await tsjson.Parse.String(objData, "module", "module");
		return res;
	}
}

/** A message */
export class ModuleInfoResponse extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public info?: padlock__ModuleInfo;
	public ToProtoJSON(): Object {
		return {
			info: this.info?.ToProtoJSON(),
		};
	}
	public static async Parse(data: any): Promise<ModuleInfoResponse> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new ModuleInfoResponse();
		res.info = await tsjson.Parse.Message(objData, "info", "info", padlock__ModuleInfo.Parse);
		return res;
	}
}

/** A message */
export class ModuleListSlotsRequest extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public auth?: AuthToken;
	/** A field */
	public module?: string;
	public ToProtoJSON(): Object {
		return {
			auth: this.auth?.ToProtoJSON(),
			module: tsjson.ToProtoJSON.String(this.module),
		};
	}
	public static async Parse(data: any): Promise<ModuleListSlotsRequest> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new ModuleListSlotsRequest();
		res.auth = await tsjson.Parse.Message(objData, "auth", "auth", AuthToken.Parse);
		res.module = await tsjson.Parse.String(objData, "module", "module");
		return res;
	}
}

/** A message */
export class ModuleListSlotsResponse extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public slots?: padlock__SlotInfo[];
	public ToProtoJSON(): Object {
		return {
			slots: tsjson.ToProtoJSON.Repeated(val => val.ToProtoJSON(), this.slots),
		};
	}
	public static async Parse(data: any): Promise<ModuleListSlotsResponse> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new ModuleListSlotsResponse();
		res.slots = await tsjson.Parse.Repeated(objData, "slots", "slots", padlock__SlotInfo.Parse);
		return res;
	}
}

/** A message */
export class SlotListMechanismsRequest extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public auth?: AuthToken;
	/** A field */
	public module?: string;
	/** A field */
	public slot?: number;
	public ToProtoJSON(): Object {
		return {
			auth: this.auth?.ToProtoJSON(),
			module: tsjson.ToProtoJSON.String(this.module),
			slot: tsjson.ToProtoJSON.StringNumber(this.slot),
		};
	}
	public static async Parse(data: any): Promise<SlotListMechanismsRequest> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new SlotListMechanismsRequest();
		res.auth = await tsjson.Parse.Message(objData, "auth", "auth", AuthToken.Parse);
		res.module = await tsjson.Parse.String(objData, "module", "module");
		res.slot = await tsjson.Parse.Number(objData, "slot", "slot");
		return res;
	}
}

/** A message */
export class SlotListMechanismsResponse extends Object implements tsjson.ProtoJSONCompatible {
	public ToProtoJSON(): Object {
		return {
		};
	}
	public static async Parse(data: any): Promise<SlotListMechanismsResponse> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new SlotListMechanismsResponse();
		return res;
	}
}

