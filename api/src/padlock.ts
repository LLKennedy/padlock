/**
 * Code generated by protoc-gen-tsjson. DO NOT EDIT.
 * versions:
 * 	protoc-gen-tsjson v0.5.2
 * 	protoc            v3.10.1
 * source: padlock.proto
 */

import * as tsjson from "@llkennedy/protoc-gen-tsjson";
import { ModuleInfo as padlock__ModuleInfo, SlotInfo as padlock__SlotInfo, Mechanism as padlock__Mechanism, Attribute as padlock__Attribute } from "pkcs11";
import { AttributeType as padlock__AttributeType } from "attributes";

/** A message */
export class AuthHello extends Object implements tsjson.ProtoJSONCompatible {
	public ToProtoJSON(): Object {
		return {
		};
	}
	public static async Parse(data: any): Promise<AuthHello> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new AuthHello();
		return res;
	}
}

/** A message */
export class AuthToken extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public data?: Uint8Array;
	public ToProtoJSON(): Object {
		return {
			data: tsjson.ToProtoJSON.Bytes(this.data),
		};
	}
	public static async Parse(data: any): Promise<AuthToken> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new AuthToken();
		res.data = await tsjson.Parse.Bytes(objData, "data", "data");
		return res;
	}
}

/** A message */
export class ApplicationListModulesRequest extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public auth?: AuthToken;
	public ToProtoJSON(): Object {
		return {
			auth: this.auth?.ToProtoJSON(),
		};
	}
	public static async Parse(data: any): Promise<ApplicationListModulesRequest> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new ApplicationListModulesRequest();
		res.auth = await tsjson.Parse.Message(objData, "auth", "auth", AuthToken.Parse);
		return res;
	}
}

/** A message */
export class ApplicationListModulesResponse extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public modules?: ReadonlyMap<string, padlock__ModuleInfo | null>;
	public ToProtoJSON(): Object {
		return {
			modules: tsjson.ToProtoJSON.Map(val => val?.ToProtoJSON(), this.modules),
		};
	}
	public static async Parse(data: any): Promise<ApplicationListModulesResponse> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new ApplicationListModulesResponse();
		res.modules = await tsjson.Parse.Map(objData, "modules", "modules", async val => val, async val => tsjson.Parse.Message({"value":val}, "value", "value", padlock__ModuleInfo.Parse));
		return res;
	}
}

/** A message */
export class ApplicationConnectRequest extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public auth?: AuthToken;
	/** A field */
	public module?: string;
	public ToProtoJSON(): Object {
		return {
			auth: this.auth?.ToProtoJSON(),
			module: tsjson.ToProtoJSON.String(this.module),
		};
	}
	public static async Parse(data: any): Promise<ApplicationConnectRequest> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new ApplicationConnectRequest();
		res.auth = await tsjson.Parse.Message(objData, "auth", "auth", AuthToken.Parse);
		res.module = await tsjson.Parse.String(objData, "module", "module");
		return res;
	}
}

/** A message */
export class ApplicationConnectUpdate extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public info?: padlock__ModuleInfo;
	/** A field */
	public changedSlots?: ModuleListSlotsResponse;
	public ToProtoJSON(): Object {
		return {
			info: this.info?.ToProtoJSON(),
			changedSlots: this.changedSlots?.ToProtoJSON(),
		};
	}
	public static async Parse(data: any): Promise<ApplicationConnectUpdate> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new ApplicationConnectUpdate();
		res.info = await tsjson.Parse.Message(objData, "info", "info", padlock__ModuleInfo.Parse);
		res.changedSlots = await tsjson.Parse.Message(objData, "changedSlots", "changed_slots", ModuleListSlotsResponse.Parse);
		return res;
	}
}

/** A message */
export class ModuleInfoRequest extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public auth?: AuthToken;
	/** A field */
	public module?: string;
	public ToProtoJSON(): Object {
		return {
			auth: this.auth?.ToProtoJSON(),
			module: tsjson.ToProtoJSON.String(this.module),
		};
	}
	public static async Parse(data: any): Promise<ModuleInfoRequest> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new ModuleInfoRequest();
		res.auth = await tsjson.Parse.Message(objData, "auth", "auth", AuthToken.Parse);
		res.module = await tsjson.Parse.String(objData, "module", "module");
		return res;
	}
}

/** A message */
export class ModuleInfoResponse extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public info?: padlock__ModuleInfo;
	public ToProtoJSON(): Object {
		return {
			info: this.info?.ToProtoJSON(),
		};
	}
	public static async Parse(data: any): Promise<ModuleInfoResponse> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new ModuleInfoResponse();
		res.info = await tsjson.Parse.Message(objData, "info", "info", padlock__ModuleInfo.Parse);
		return res;
	}
}

/** A message */
export class ModuleListSlotsRequest extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public auth?: AuthToken;
	/** A field */
	public module?: string;
	public ToProtoJSON(): Object {
		return {
			auth: this.auth?.ToProtoJSON(),
			module: tsjson.ToProtoJSON.String(this.module),
		};
	}
	public static async Parse(data: any): Promise<ModuleListSlotsRequest> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new ModuleListSlotsRequest();
		res.auth = await tsjson.Parse.Message(objData, "auth", "auth", AuthToken.Parse);
		res.module = await tsjson.Parse.String(objData, "module", "module");
		return res;
	}
}

/** A message */
export class ModuleListSlotsResponse extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public slots?: padlock__SlotInfo[];
	public ToProtoJSON(): Object {
		return {
			slots: tsjson.ToProtoJSON.Repeated(val => val.ToProtoJSON(), this.slots),
		};
	}
	public static async Parse(data: any): Promise<ModuleListSlotsResponse> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new ModuleListSlotsResponse();
		res.slots = await tsjson.Parse.Repeated(objData, "slots", "slots", padlock__SlotInfo.Parse);
		return res;
	}
}

/** A message */
export class SlotID extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public auth?: AuthToken;
	/** A field */
	public module?: string;
	/** A field */
	public slot?: number;
	public ToProtoJSON(): Object {
		return {
			auth: this.auth?.ToProtoJSON(),
			module: tsjson.ToProtoJSON.String(this.module),
			slot: tsjson.ToProtoJSON.StringNumber(this.slot),
		};
	}
	public static async Parse(data: any): Promise<SlotID> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new SlotID();
		res.auth = await tsjson.Parse.Message(objData, "auth", "auth", AuthToken.Parse);
		res.module = await tsjson.Parse.String(objData, "module", "module");
		res.slot = await tsjson.Parse.Number(objData, "slot", "slot");
		return res;
	}
}

/** A message */
export class SlotListMechanismsRequest extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public id?: SlotID;
	public ToProtoJSON(): Object {
		return {
			id: this.id?.ToProtoJSON(),
		};
	}
	public static async Parse(data: any): Promise<SlotListMechanismsRequest> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new SlotListMechanismsRequest();
		res.id = await tsjson.Parse.Message(objData, "id", "id", SlotID.Parse);
		return res;
	}
}

/** A message */
export class SlotListMechanismsResponse extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public mechanisms?: padlock__Mechanism[];
	public ToProtoJSON(): Object {
		return {
			mechanisms: tsjson.ToProtoJSON.Repeated(val => val.ToProtoJSON(), this.mechanisms),
		};
	}
	public static async Parse(data: any): Promise<SlotListMechanismsResponse> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new SlotListMechanismsResponse();
		res.mechanisms = await tsjson.Parse.Repeated(objData, "mechanisms", "mechanisms", padlock__Mechanism.Parse);
		return res;
	}
}

/** A message */
export class SlotInitTokenRequest extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public id?: SlotID;
	/** A field */
	public securityOfficerPin?: string;
	/** A field */
	public tokenLabel?: string;
	public ToProtoJSON(): Object {
		return {
			id: this.id?.ToProtoJSON(),
			securityOfficerPin: tsjson.ToProtoJSON.String(this.securityOfficerPin),
			tokenLabel: tsjson.ToProtoJSON.String(this.tokenLabel),
		};
	}
	public static async Parse(data: any): Promise<SlotInitTokenRequest> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new SlotInitTokenRequest();
		res.id = await tsjson.Parse.Message(objData, "id", "id", SlotID.Parse);
		res.securityOfficerPin = await tsjson.Parse.String(objData, "securityOfficerPin", "security_officer_pin");
		res.tokenLabel = await tsjson.Parse.String(objData, "tokenLabel", "token_label");
		return res;
	}
}

/** A message */
export class SlotInitTokenResponse extends Object implements tsjson.ProtoJSONCompatible {
	public ToProtoJSON(): Object {
		return {
		};
	}
	public static async Parse(data: any): Promise<SlotInitTokenResponse> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new SlotInitTokenResponse();
		return res;
	}
}

/** A message */
export class SlotOpenSessionRequest extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public id?: SlotID;
	/** A field */
	public writeSession?: boolean;
	public ToProtoJSON(): Object {
		return {
			id: this.id?.ToProtoJSON(),
			writeSession: tsjson.ToProtoJSON.Bool(this.writeSession),
		};
	}
	public static async Parse(data: any): Promise<SlotOpenSessionRequest> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new SlotOpenSessionRequest();
		res.id = await tsjson.Parse.Message(objData, "id", "id", SlotID.Parse);
		res.writeSession = await tsjson.Parse.Bool(objData, "writeSession", "write_session");
		return res;
	}
}

/** A message */
export class SlotOpenSessionUpdate extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public uuid?: string;
	/** A field */
	public loggedIn?: boolean;
	public ToProtoJSON(): Object {
		return {
			uuid: tsjson.ToProtoJSON.String(this.uuid),
			loggedIn: tsjson.ToProtoJSON.Bool(this.loggedIn),
		};
	}
	public static async Parse(data: any): Promise<SlotOpenSessionUpdate> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new SlotOpenSessionUpdate();
		res.uuid = await tsjson.Parse.String(objData, "uuid", "uuid");
		res.loggedIn = await tsjson.Parse.Bool(objData, "loggedIn", "logged_in");
		return res;
	}
}

/** A message */
export class SessionID extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public slot?: SlotID;
	/** A field */
	public uuid?: string;
	public ToProtoJSON(): Object {
		return {
			slot: this.slot?.ToProtoJSON(),
			uuid: tsjson.ToProtoJSON.String(this.uuid),
		};
	}
	public static async Parse(data: any): Promise<SessionID> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new SessionID();
		res.slot = await tsjson.Parse.Message(objData, "slot", "slot", SlotID.Parse);
		res.uuid = await tsjson.Parse.String(objData, "uuid", "uuid");
		return res;
	}
}

/** A message */
export class SessionLoginRequest extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public id?: SlotID;
	/** A field */
	public pin?: string;
	/** A field */
	public loginAsSecurityOfficer?: boolean;
	public ToProtoJSON(): Object {
		return {
			id: this.id?.ToProtoJSON(),
			pin: tsjson.ToProtoJSON.String(this.pin),
			loginAsSecurityOfficer: tsjson.ToProtoJSON.Bool(this.loginAsSecurityOfficer),
		};
	}
	public static async Parse(data: any): Promise<SessionLoginRequest> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new SessionLoginRequest();
		res.id = await tsjson.Parse.Message(objData, "id", "id", SlotID.Parse);
		res.pin = await tsjson.Parse.String(objData, "pin", "pin");
		res.loginAsSecurityOfficer = await tsjson.Parse.Bool(objData, "loginAsSecurityOfficer", "login_as_security_officer");
		return res;
	}
}

/** A message */
export class SessionLoginResponse extends Object implements tsjson.ProtoJSONCompatible {
	public ToProtoJSON(): Object {
		return {
		};
	}
	public static async Parse(data: any): Promise<SessionLoginResponse> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new SessionLoginResponse();
		return res;
	}
}

/** A message */
export class SessionLogoutResponse extends Object implements tsjson.ProtoJSONCompatible {
	public ToProtoJSON(): Object {
		return {
		};
	}
	public static async Parse(data: any): Promise<SessionLogoutResponse> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new SessionLogoutResponse();
		return res;
	}
}

/** A message */
export class SessionListObjectsRequest extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public template?: padlock__Attribute[];
	public ToProtoJSON(): Object {
		return {
			template: tsjson.ToProtoJSON.Repeated(val => val.ToProtoJSON(), this.template),
		};
	}
	public static async Parse(data: any): Promise<SessionListObjectsRequest> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new SessionListObjectsRequest();
		res.template = await tsjson.Parse.Repeated(objData, "template", "template", padlock__Attribute.Parse);
		return res;
	}
}

/** A message */
export class ObjectID extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public session?: SessionID;
	/** A field */
	public uuid?: string;
	public ToProtoJSON(): Object {
		return {
			session: this.session?.ToProtoJSON(),
			uuid: tsjson.ToProtoJSON.String(this.uuid),
		};
	}
	public static async Parse(data: any): Promise<ObjectID> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new ObjectID();
		res.session = await tsjson.Parse.Message(objData, "session", "session", SessionID.Parse);
		res.uuid = await tsjson.Parse.String(objData, "uuid", "uuid");
		return res;
	}
}

/** A message */
export class ObjectListAttributeValuesRequest extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public id?: ObjectID;
	/** A field */
	public requestedAttributes?: padlock__AttributeType[];
	public ToProtoJSON(): Object {
		return {
			id: this.id?.ToProtoJSON(),
			requestedAttributes: tsjson.ToProtoJSON.Repeated(val => tsjson.ToProtoJSON.Enum(padlock__AttributeType, val), this.requestedAttributes),
		};
	}
	public static async Parse(data: any): Promise<ObjectListAttributeValuesRequest> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new ObjectListAttributeValuesRequest();
		res.id = await tsjson.Parse.Message(objData, "id", "id", ObjectID.Parse);
		res.requestedAttributes = await tsjson.Parse.Repeated(objData, "requestedAttributes", "requested_attributes", tsjson.PrimitiveParse.Enum(padlock__AttributeType));
		return res;
	}
}

