/**
 * Code generated by protoc-gen-tsjson. DO NOT EDIT.
 * versions:
 * 	protoc-gen-tsjson v0.5.0
 * 	protoc            v3.10.1
 * source: padlock.proto
 */

import * as tsjson from "@llkennedy/protoc-gen-tsjson";
import { Slot as padlock__Slot } from "pkcs11";

/** A message */
export class AuthHello extends Object implements tsjson.ProtoJSONCompatible {
	public ToProtoJSON(): Object {
		return {
		};
	}
	public static async Parse(data: any): Promise<AuthHello> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new AuthHello();
		return res;
	}
}

/** A message */
export class AuthToken extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public data?: Uint8Array;
	public ToProtoJSON(): Object {
		return {
			data: tsjson.ToProtoJSON.Bytes(this.data),
		};
	}
	public static async Parse(data: any): Promise<AuthToken> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new AuthToken();
		res.data = await tsjson.Parse.Bytes(objData, "data", "data");
		return res;
	}
}

/** A message */
export class ApplicationListModulesRequest extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public auth?: AuthToken;
	public ToProtoJSON(): Object {
		return {
			auth: this.auth?.ToProtoJSON(),
		};
	}
	public static async Parse(data: any): Promise<ApplicationListModulesRequest> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new ApplicationListModulesRequest();
		res.auth = await tsjson.Parse.Message(objData, "auth", "auth", AuthToken.Parse);
		return res;
	}
}

/** A message */
export class ApplicationListModulesResponse extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public modules?: string[];
	public ToProtoJSON(): Object {
		return {
			modules: tsjson.ToProtoJSON.Repeated(tsjson.ToProtoJSON.String, this.modules),
		};
	}
	public static async Parse(data: any): Promise<ApplicationListModulesResponse> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new ApplicationListModulesResponse();
		res.modules = await tsjson.Parse.Repeated(objData, "modules", "modules", tsjson.PrimitiveParse.String());
		return res;
	}
}

/** A message */
export class ApplicationConnectRequest extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public auth?: AuthToken;
	/** A field */
	public module?: string;
	public ToProtoJSON(): Object {
		return {
			auth: this.auth?.ToProtoJSON(),
			module: tsjson.ToProtoJSON.String(this.module),
		};
	}
	public static async Parse(data: any): Promise<ApplicationConnectRequest> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new ApplicationConnectRequest();
		res.auth = await tsjson.Parse.Message(objData, "auth", "auth", AuthToken.Parse);
		res.module = await tsjson.Parse.String(objData, "module", "module");
		return res;
	}
}

/** A message */
export class ApplicationConnectUpdate extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public loggedIn?: boolean;
	public ToProtoJSON(): Object {
		return {
			loggedIn: tsjson.ToProtoJSON.Bool(this.loggedIn),
		};
	}
	public static async Parse(data: any): Promise<ApplicationConnectUpdate> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new ApplicationConnectUpdate();
		res.loggedIn = await tsjson.Parse.Bool(objData, "loggedIn", "logged_in");
		return res;
	}
}

/** A message */
export class ModuleListSlotsRequest extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public auth?: AuthToken;
	public ToProtoJSON(): Object {
		return {
			auth: this.auth?.ToProtoJSON(),
		};
	}
	public static async Parse(data: any): Promise<ModuleListSlotsRequest> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new ModuleListSlotsRequest();
		res.auth = await tsjson.Parse.Message(objData, "auth", "auth", AuthToken.Parse);
		return res;
	}
}

/** A message */
export class ModuleListSlotsResponse extends Object implements tsjson.ProtoJSONCompatible {
	/** A field */
	public slots?: padlock__Slot[];
	public ToProtoJSON(): Object {
		return {
			slots: tsjson.ToProtoJSON.Repeated(val => val.ToProtoJSON(), this.slots),
		};
	}
	public static async Parse(data: any): Promise<ModuleListSlotsResponse> {
		let objData: Object = tsjson.AnyToObject(data);
		let res = new ModuleListSlotsResponse();
		res.slots = await tsjson.Parse.Repeated(objData, "slots", "slots", padlock__Slot.Parse);
		return res;
	}
}

