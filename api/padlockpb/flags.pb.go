// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.10.1
// source: flags.proto

package padlockpb

import (
	_ "github.com/LLKennedy/protoc-gen-tsjson/tsjsonpb"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type FlagType int32

const (
	FlagType_CKF_UNDEFINED_UNKNOWN              FlagType = 0
	FlagType_CKF_TOKEN_PRESENT                  FlagType = 1
	FlagType_CKF_REMOVABLE_DEVICE               FlagType = 2
	FlagType_CKF_HW_SLOT                        FlagType = 3
	FlagType_CKF_RNG                            FlagType = 4
	FlagType_CKF_WRITE_PROTECTED                FlagType = 5
	FlagType_CKF_LOGIN_REQUIRED                 FlagType = 6
	FlagType_CKF_USER_PIN_INITIALIZED           FlagType = 7
	FlagType_CKF_RESTORE_KEY_NOT_NEEDED         FlagType = 8
	FlagType_CKF_CLOCK_ON_TOKEN                 FlagType = 9
	FlagType_CKF_PROTECTED_AUTHENTICATION_PATH  FlagType = 10
	FlagType_CKF_DUAL_CRYPTO_OPERATIONS         FlagType = 11
	FlagType_CKF_TOKEN_INITIALIZED              FlagType = 12
	FlagType_CKF_SECONDARY_AUTHENTICATION       FlagType = 13
	FlagType_CKF_USER_PIN_COUNT_LOW             FlagType = 14
	FlagType_CKF_USER_PIN_FINAL_TRY             FlagType = 15
	FlagType_CKF_USER_PIN_LOCKED                FlagType = 16
	FlagType_CKF_USER_PIN_TO_BE_CHANGED         FlagType = 17
	FlagType_CKF_SO_PIN_COUNT_LOW               FlagType = 18
	FlagType_CKF_SO_PIN_FINAL_TRY               FlagType = 19
	FlagType_CKF_SO_PIN_LOCKED                  FlagType = 20
	FlagType_CKF_SO_PIN_TO_BE_CHANGED           FlagType = 21
	FlagType_CKF_ERROR_STATE                    FlagType = 22
	FlagType_CKF_RW_SESSION                     FlagType = 23
	FlagType_CKF_SERIAL_SESSION                 FlagType = 24
	FlagType_CKF_ARRAY_ATTRIBUTE                FlagType = 25
	FlagType_CKF_HW                             FlagType = 26
	FlagType_CKF_ENCRYPT                        FlagType = 27
	FlagType_CKF_DECRYPT                        FlagType = 28
	FlagType_CKF_DIGEST                         FlagType = 29
	FlagType_CKF_SIGN                           FlagType = 30
	FlagType_CKF_SIGN_RECOVER                   FlagType = 31
	FlagType_CKF_VERIFY                         FlagType = 32
	FlagType_CKF_VERIFY_RECOVER                 FlagType = 33
	FlagType_CKF_GENERATE                       FlagType = 34
	FlagType_CKF_GENERATE_KEY_PAIR              FlagType = 35
	FlagType_CKF_WRAP                           FlagType = 36
	FlagType_CKF_UNWRAP                         FlagType = 37
	FlagType_CKF_DERIVE                         FlagType = 38
	FlagType_CKF_EC_F_P                         FlagType = 39
	FlagType_CKF_EC_F_2M                        FlagType = 40
	FlagType_CKF_EC_ECPARAMETERS                FlagType = 41
	FlagType_CKF_EC_NAMEDCURVE                  FlagType = 42
	FlagType_CKF_EC_UNCOMPRESS                  FlagType = 43
	FlagType_CKF_EC_COMPRESS                    FlagType = 44
	FlagType_CKF_EXTENSION                      FlagType = 45
	FlagType_CKF_LIBRARY_CANT_CREATE_OS_THREADS FlagType = 46
	FlagType_CKF_OS_LOCKING_OK                  FlagType = 47
	FlagType_CKF_DONT_BLOCK                     FlagType = 48
	FlagType_CKF_NEXT_OTP                       FlagType = 49
	FlagType_CKF_EXCLUDE_TIME                   FlagType = 50
	FlagType_CKF_EXCLUDE_COUNTER                FlagType = 51
	FlagType_CKF_EXCLUDE_CHALLENGE              FlagType = 52
	FlagType_CKF_EXCLUDE_PIN                    FlagType = 53
	FlagType_CKF_USER_FRIENDLY_OTP              FlagType = 54
)

// Enum value maps for FlagType.
var (
	FlagType_name = map[int32]string{
		0:  "CKF_UNDEFINED_UNKNOWN",
		1:  "CKF_TOKEN_PRESENT",
		2:  "CKF_REMOVABLE_DEVICE",
		3:  "CKF_HW_SLOT",
		4:  "CKF_RNG",
		5:  "CKF_WRITE_PROTECTED",
		6:  "CKF_LOGIN_REQUIRED",
		7:  "CKF_USER_PIN_INITIALIZED",
		8:  "CKF_RESTORE_KEY_NOT_NEEDED",
		9:  "CKF_CLOCK_ON_TOKEN",
		10: "CKF_PROTECTED_AUTHENTICATION_PATH",
		11: "CKF_DUAL_CRYPTO_OPERATIONS",
		12: "CKF_TOKEN_INITIALIZED",
		13: "CKF_SECONDARY_AUTHENTICATION",
		14: "CKF_USER_PIN_COUNT_LOW",
		15: "CKF_USER_PIN_FINAL_TRY",
		16: "CKF_USER_PIN_LOCKED",
		17: "CKF_USER_PIN_TO_BE_CHANGED",
		18: "CKF_SO_PIN_COUNT_LOW",
		19: "CKF_SO_PIN_FINAL_TRY",
		20: "CKF_SO_PIN_LOCKED",
		21: "CKF_SO_PIN_TO_BE_CHANGED",
		22: "CKF_ERROR_STATE",
		23: "CKF_RW_SESSION",
		24: "CKF_SERIAL_SESSION",
		25: "CKF_ARRAY_ATTRIBUTE",
		26: "CKF_HW",
		27: "CKF_ENCRYPT",
		28: "CKF_DECRYPT",
		29: "CKF_DIGEST",
		30: "CKF_SIGN",
		31: "CKF_SIGN_RECOVER",
		32: "CKF_VERIFY",
		33: "CKF_VERIFY_RECOVER",
		34: "CKF_GENERATE",
		35: "CKF_GENERATE_KEY_PAIR",
		36: "CKF_WRAP",
		37: "CKF_UNWRAP",
		38: "CKF_DERIVE",
		39: "CKF_EC_F_P",
		40: "CKF_EC_F_2M",
		41: "CKF_EC_ECPARAMETERS",
		42: "CKF_EC_NAMEDCURVE",
		43: "CKF_EC_UNCOMPRESS",
		44: "CKF_EC_COMPRESS",
		45: "CKF_EXTENSION",
		46: "CKF_LIBRARY_CANT_CREATE_OS_THREADS",
		47: "CKF_OS_LOCKING_OK",
		48: "CKF_DONT_BLOCK",
		49: "CKF_NEXT_OTP",
		50: "CKF_EXCLUDE_TIME",
		51: "CKF_EXCLUDE_COUNTER",
		52: "CKF_EXCLUDE_CHALLENGE",
		53: "CKF_EXCLUDE_PIN",
		54: "CKF_USER_FRIENDLY_OTP",
	}
	FlagType_value = map[string]int32{
		"CKF_UNDEFINED_UNKNOWN":              0,
		"CKF_TOKEN_PRESENT":                  1,
		"CKF_REMOVABLE_DEVICE":               2,
		"CKF_HW_SLOT":                        3,
		"CKF_RNG":                            4,
		"CKF_WRITE_PROTECTED":                5,
		"CKF_LOGIN_REQUIRED":                 6,
		"CKF_USER_PIN_INITIALIZED":           7,
		"CKF_RESTORE_KEY_NOT_NEEDED":         8,
		"CKF_CLOCK_ON_TOKEN":                 9,
		"CKF_PROTECTED_AUTHENTICATION_PATH":  10,
		"CKF_DUAL_CRYPTO_OPERATIONS":         11,
		"CKF_TOKEN_INITIALIZED":              12,
		"CKF_SECONDARY_AUTHENTICATION":       13,
		"CKF_USER_PIN_COUNT_LOW":             14,
		"CKF_USER_PIN_FINAL_TRY":             15,
		"CKF_USER_PIN_LOCKED":                16,
		"CKF_USER_PIN_TO_BE_CHANGED":         17,
		"CKF_SO_PIN_COUNT_LOW":               18,
		"CKF_SO_PIN_FINAL_TRY":               19,
		"CKF_SO_PIN_LOCKED":                  20,
		"CKF_SO_PIN_TO_BE_CHANGED":           21,
		"CKF_ERROR_STATE":                    22,
		"CKF_RW_SESSION":                     23,
		"CKF_SERIAL_SESSION":                 24,
		"CKF_ARRAY_ATTRIBUTE":                25,
		"CKF_HW":                             26,
		"CKF_ENCRYPT":                        27,
		"CKF_DECRYPT":                        28,
		"CKF_DIGEST":                         29,
		"CKF_SIGN":                           30,
		"CKF_SIGN_RECOVER":                   31,
		"CKF_VERIFY":                         32,
		"CKF_VERIFY_RECOVER":                 33,
		"CKF_GENERATE":                       34,
		"CKF_GENERATE_KEY_PAIR":              35,
		"CKF_WRAP":                           36,
		"CKF_UNWRAP":                         37,
		"CKF_DERIVE":                         38,
		"CKF_EC_F_P":                         39,
		"CKF_EC_F_2M":                        40,
		"CKF_EC_ECPARAMETERS":                41,
		"CKF_EC_NAMEDCURVE":                  42,
		"CKF_EC_UNCOMPRESS":                  43,
		"CKF_EC_COMPRESS":                    44,
		"CKF_EXTENSION":                      45,
		"CKF_LIBRARY_CANT_CREATE_OS_THREADS": 46,
		"CKF_OS_LOCKING_OK":                  47,
		"CKF_DONT_BLOCK":                     48,
		"CKF_NEXT_OTP":                       49,
		"CKF_EXCLUDE_TIME":                   50,
		"CKF_EXCLUDE_COUNTER":                51,
		"CKF_EXCLUDE_CHALLENGE":              52,
		"CKF_EXCLUDE_PIN":                    53,
		"CKF_USER_FRIENDLY_OTP":              54,
	}
)

func (x FlagType) Enum() *FlagType {
	p := new(FlagType)
	*p = x
	return p
}

func (x FlagType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlagType) Descriptor() protoreflect.EnumDescriptor {
	return file_flags_proto_enumTypes[0].Descriptor()
}

func (FlagType) Type() protoreflect.EnumType {
	return &file_flags_proto_enumTypes[0]
}

func (x FlagType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlagType.Descriptor instead.
func (FlagType) EnumDescriptor() ([]byte, []int) {
	return file_flags_proto_rawDescGZIP(), []int{0}
}

var File_flags_proto protoreflect.FileDescriptor

var file_flags_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x70,
	0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x0c, 0x74, 0x73, 0x6a, 0x73, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2a, 0x87, 0x0a, 0x0a, 0x08, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4b, 0x46, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x45, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x43, 0x4b, 0x46, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e,
	0x54, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4b, 0x46, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a,
	0x0b, 0x43, 0x4b, 0x46, 0x5f, 0x48, 0x57, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x10, 0x03, 0x12, 0x0b,
	0x0a, 0x07, 0x43, 0x4b, 0x46, 0x5f, 0x52, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x43,
	0x4b, 0x46, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4b, 0x46, 0x5f, 0x4c, 0x4f, 0x47, 0x49,
	0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18,
	0x43, 0x4b, 0x46, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x49, 0x4e, 0x5f, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x07, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4b,
	0x46, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4b,
	0x46, 0x5f, 0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e,
	0x10, 0x09, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4b, 0x46, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x10, 0x0a, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4b, 0x46,
	0x5f, 0x44, 0x55, 0x41, 0x4c, 0x5f, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x5f, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x0b, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4b, 0x46,
	0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x0c, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4b, 0x46, 0x5f, 0x53, 0x45, 0x43, 0x4f,
	0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4b, 0x46, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x50, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x57,
	0x10, 0x0e, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4b, 0x46, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50,
	0x49, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x54, 0x52, 0x59, 0x10, 0x0f, 0x12, 0x17,
	0x0a, 0x13, 0x43, 0x4b, 0x46, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x49, 0x4e, 0x5f, 0x4c,
	0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x10, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4b, 0x46, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x50, 0x49, 0x4e, 0x5f, 0x54, 0x4f, 0x5f, 0x42, 0x45, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x11, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4b, 0x46, 0x5f, 0x53,
	0x4f, 0x5f, 0x50, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x57, 0x10,
	0x12, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4b, 0x46, 0x5f, 0x53, 0x4f, 0x5f, 0x50, 0x49, 0x4e, 0x5f,
	0x46, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x54, 0x52, 0x59, 0x10, 0x13, 0x12, 0x15, 0x0a, 0x11, 0x43,
	0x4b, 0x46, 0x5f, 0x53, 0x4f, 0x5f, 0x50, 0x49, 0x4e, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44,
	0x10, 0x14, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4b, 0x46, 0x5f, 0x53, 0x4f, 0x5f, 0x50, 0x49, 0x4e,
	0x5f, 0x54, 0x4f, 0x5f, 0x42, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x15,
	0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4b, 0x46, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x10, 0x16, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4b, 0x46, 0x5f, 0x52, 0x57, 0x5f,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x17, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4b, 0x46,
	0x5f, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10,
	0x18, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4b, 0x46, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x10, 0x19, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4b,
	0x46, 0x5f, 0x48, 0x57, 0x10, 0x1a, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4b, 0x46, 0x5f, 0x45, 0x4e,
	0x43, 0x52, 0x59, 0x50, 0x54, 0x10, 0x1b, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4b, 0x46, 0x5f, 0x44,
	0x45, 0x43, 0x52, 0x59, 0x50, 0x54, 0x10, 0x1c, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4b, 0x46, 0x5f,
	0x44, 0x49, 0x47, 0x45, 0x53, 0x54, 0x10, 0x1d, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4b, 0x46, 0x5f,
	0x53, 0x49, 0x47, 0x4e, 0x10, 0x1e, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4b, 0x46, 0x5f, 0x53, 0x49,
	0x47, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x1f, 0x12, 0x0e, 0x0a, 0x0a,
	0x43, 0x4b, 0x46, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x10, 0x20, 0x12, 0x16, 0x0a, 0x12,
	0x43, 0x4b, 0x46, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56,
	0x45, 0x52, 0x10, 0x21, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4b, 0x46, 0x5f, 0x47, 0x45, 0x4e, 0x45,
	0x52, 0x41, 0x54, 0x45, 0x10, 0x22, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4b, 0x46, 0x5f, 0x47, 0x45,
	0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x50, 0x41, 0x49, 0x52, 0x10,
	0x23, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4b, 0x46, 0x5f, 0x57, 0x52, 0x41, 0x50, 0x10, 0x24, 0x12,
	0x0e, 0x0a, 0x0a, 0x43, 0x4b, 0x46, 0x5f, 0x55, 0x4e, 0x57, 0x52, 0x41, 0x50, 0x10, 0x25, 0x12,
	0x0e, 0x0a, 0x0a, 0x43, 0x4b, 0x46, 0x5f, 0x44, 0x45, 0x52, 0x49, 0x56, 0x45, 0x10, 0x26, 0x12,
	0x0e, 0x0a, 0x0a, 0x43, 0x4b, 0x46, 0x5f, 0x45, 0x43, 0x5f, 0x46, 0x5f, 0x50, 0x10, 0x27, 0x12,
	0x0f, 0x0a, 0x0b, 0x43, 0x4b, 0x46, 0x5f, 0x45, 0x43, 0x5f, 0x46, 0x5f, 0x32, 0x4d, 0x10, 0x28,
	0x12, 0x17, 0x0a, 0x13, 0x43, 0x4b, 0x46, 0x5f, 0x45, 0x43, 0x5f, 0x45, 0x43, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x53, 0x10, 0x29, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4b, 0x46,
	0x5f, 0x45, 0x43, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x44, 0x43, 0x55, 0x52, 0x56, 0x45, 0x10, 0x2a,
	0x12, 0x15, 0x0a, 0x11, 0x43, 0x4b, 0x46, 0x5f, 0x45, 0x43, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x4d,
	0x50, 0x52, 0x45, 0x53, 0x53, 0x10, 0x2b, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4b, 0x46, 0x5f, 0x45,
	0x43, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x10, 0x2c, 0x12, 0x11, 0x0a, 0x0d,
	0x43, 0x4b, 0x46, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x2d, 0x12,
	0x26, 0x0a, 0x22, 0x43, 0x4b, 0x46, 0x5f, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x52, 0x59, 0x5f, 0x43,
	0x41, 0x4e, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x53, 0x5f, 0x54, 0x48,
	0x52, 0x45, 0x41, 0x44, 0x53, 0x10, 0x2e, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4b, 0x46, 0x5f, 0x4f,
	0x53, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x4b, 0x10, 0x2f, 0x12, 0x12,
	0x0a, 0x0e, 0x43, 0x4b, 0x46, 0x5f, 0x44, 0x4f, 0x4e, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b,
	0x10, 0x30, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4b, 0x46, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x4f,
	0x54, 0x50, 0x10, 0x31, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4b, 0x46, 0x5f, 0x45, 0x58, 0x43, 0x4c,
	0x55, 0x44, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x32, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4b,
	0x46, 0x5f, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45,
	0x52, 0x10, 0x33, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4b, 0x46, 0x5f, 0x45, 0x58, 0x43, 0x4c, 0x55,
	0x44, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x10, 0x34, 0x12, 0x13,
	0x0a, 0x0f, 0x43, 0x4b, 0x46, 0x5f, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x5f, 0x50, 0x49,
	0x4e, 0x10, 0x35, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4b, 0x46, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x4c, 0x59, 0x5f, 0x4f, 0x54, 0x50, 0x10, 0x36, 0x42, 0x45,
	0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4c, 0x4c, 0x4b,
	0x65, 0x6e, 0x6e, 0x65, 0x64, 0x79, 0x2f, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2f, 0x70,
	0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x70, 0x62, 0x82, 0xd9, 0x66, 0x10, 0x40, 0x6c, 0x6c, 0x6b,
	0x64, 0x65, 0x6d, 0x6f, 0x2f, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x8a, 0xd9, 0x66, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flags_proto_rawDescOnce sync.Once
	file_flags_proto_rawDescData = file_flags_proto_rawDesc
)

func file_flags_proto_rawDescGZIP() []byte {
	file_flags_proto_rawDescOnce.Do(func() {
		file_flags_proto_rawDescData = protoimpl.X.CompressGZIP(file_flags_proto_rawDescData)
	})
	return file_flags_proto_rawDescData
}

var file_flags_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_flags_proto_goTypes = []interface{}{
	(FlagType)(0), // 0: padlock.FlagType
}
var file_flags_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_flags_proto_init() }
func file_flags_proto_init() {
	if File_flags_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flags_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_flags_proto_goTypes,
		DependencyIndexes: file_flags_proto_depIdxs,
		EnumInfos:         file_flags_proto_enumTypes,
	}.Build()
	File_flags_proto = out.File
	file_flags_proto_rawDesc = nil
	file_flags_proto_goTypes = nil
	file_flags_proto_depIdxs = nil
}
