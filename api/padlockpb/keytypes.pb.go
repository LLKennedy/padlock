// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.10.1
// source: keytypes.proto

package padlockpb

import (
	_ "github.com/LLKennedy/protoc-gen-tsjson/tsjsonpb"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type KeyType int32

const (
	KeyType_CKK_UNDEFINED_UNKNOWN KeyType = 0
	KeyType_CKK_RSA               KeyType = 1
	KeyType_CKK_DSA               KeyType = 2
	KeyType_CKK_DH                KeyType = 3
	KeyType_CKK_ECDSA             KeyType = 4
	KeyType_CKK_EC                KeyType = 5
	KeyType_CKK_X9_42_DH          KeyType = 6
	KeyType_CKK_KEA               KeyType = 7
	KeyType_CKK_GENERIC_SECRET    KeyType = 8
	KeyType_CKK_RC2               KeyType = 9
	KeyType_CKK_RC4               KeyType = 10
	KeyType_CKK_DES               KeyType = 11
	KeyType_CKK_DES2              KeyType = 12
	KeyType_CKK_DES3              KeyType = 13
	KeyType_CKK_CAST              KeyType = 14
	KeyType_CKK_CAST3             KeyType = 15
	KeyType_CKK_CAST5             KeyType = 16
	KeyType_CKK_CAST128           KeyType = 17
	KeyType_CKK_RC5               KeyType = 18
	KeyType_CKK_IDEA              KeyType = 19
	KeyType_CKK_SKIPJACK          KeyType = 20
	KeyType_CKK_BATON             KeyType = 21
	KeyType_CKK_JUNIPER           KeyType = 22
	KeyType_CKK_CDMF              KeyType = 23
	KeyType_CKK_AES               KeyType = 24
	KeyType_CKK_BLOWFISH          KeyType = 25
	KeyType_CKK_TWOFISH           KeyType = 26
	KeyType_CKK_SECURID           KeyType = 27
	KeyType_CKK_HOTP              KeyType = 28
	KeyType_CKK_ACTI              KeyType = 29
	KeyType_CKK_CAMELLIA          KeyType = 30
	KeyType_CKK_ARIA              KeyType = 31
	KeyType_CKK_SHA512_224_HMAC   KeyType = 32
	KeyType_CKK_SHA512_256_HMAC   KeyType = 33
	KeyType_CKK_SHA512_T_HMAC     KeyType = 34
	KeyType_CKK_SHA_1_HMAC        KeyType = 35
	KeyType_CKK_SHA224_HMAC       KeyType = 36
	KeyType_CKK_SHA256_HMAC       KeyType = 37
	KeyType_CKK_SHA384_HMAC       KeyType = 38
	KeyType_CKK_SHA512_HMAC       KeyType = 39
	KeyType_CKK_SEED              KeyType = 40
	KeyType_CKK_GOSTR3410         KeyType = 41
	KeyType_CKK_GOSTR3411         KeyType = 42
	KeyType_CKK_GOST28147         KeyType = 43
	KeyType_CKK_SHA3_224_HMAC     KeyType = 44
	KeyType_CKK_SHA3_256_HMAC     KeyType = 45
	KeyType_CKK_SHA3_384_HMAC     KeyType = 46
	KeyType_CKK_SHA3_512_HMAC     KeyType = 47
	KeyType_CKK_VENDOR_DEFINED    KeyType = 48
)

// Enum value maps for KeyType.
var (
	KeyType_name = map[int32]string{
		0:  "CKK_UNDEFINED_UNKNOWN",
		1:  "CKK_RSA",
		2:  "CKK_DSA",
		3:  "CKK_DH",
		4:  "CKK_ECDSA",
		5:  "CKK_EC",
		6:  "CKK_X9_42_DH",
		7:  "CKK_KEA",
		8:  "CKK_GENERIC_SECRET",
		9:  "CKK_RC2",
		10: "CKK_RC4",
		11: "CKK_DES",
		12: "CKK_DES2",
		13: "CKK_DES3",
		14: "CKK_CAST",
		15: "CKK_CAST3",
		16: "CKK_CAST5",
		17: "CKK_CAST128",
		18: "CKK_RC5",
		19: "CKK_IDEA",
		20: "CKK_SKIPJACK",
		21: "CKK_BATON",
		22: "CKK_JUNIPER",
		23: "CKK_CDMF",
		24: "CKK_AES",
		25: "CKK_BLOWFISH",
		26: "CKK_TWOFISH",
		27: "CKK_SECURID",
		28: "CKK_HOTP",
		29: "CKK_ACTI",
		30: "CKK_CAMELLIA",
		31: "CKK_ARIA",
		32: "CKK_SHA512_224_HMAC",
		33: "CKK_SHA512_256_HMAC",
		34: "CKK_SHA512_T_HMAC",
		35: "CKK_SHA_1_HMAC",
		36: "CKK_SHA224_HMAC",
		37: "CKK_SHA256_HMAC",
		38: "CKK_SHA384_HMAC",
		39: "CKK_SHA512_HMAC",
		40: "CKK_SEED",
		41: "CKK_GOSTR3410",
		42: "CKK_GOSTR3411",
		43: "CKK_GOST28147",
		44: "CKK_SHA3_224_HMAC",
		45: "CKK_SHA3_256_HMAC",
		46: "CKK_SHA3_384_HMAC",
		47: "CKK_SHA3_512_HMAC",
		48: "CKK_VENDOR_DEFINED",
	}
	KeyType_value = map[string]int32{
		"CKK_UNDEFINED_UNKNOWN": 0,
		"CKK_RSA":               1,
		"CKK_DSA":               2,
		"CKK_DH":                3,
		"CKK_ECDSA":             4,
		"CKK_EC":                5,
		"CKK_X9_42_DH":          6,
		"CKK_KEA":               7,
		"CKK_GENERIC_SECRET":    8,
		"CKK_RC2":               9,
		"CKK_RC4":               10,
		"CKK_DES":               11,
		"CKK_DES2":              12,
		"CKK_DES3":              13,
		"CKK_CAST":              14,
		"CKK_CAST3":             15,
		"CKK_CAST5":             16,
		"CKK_CAST128":           17,
		"CKK_RC5":               18,
		"CKK_IDEA":              19,
		"CKK_SKIPJACK":          20,
		"CKK_BATON":             21,
		"CKK_JUNIPER":           22,
		"CKK_CDMF":              23,
		"CKK_AES":               24,
		"CKK_BLOWFISH":          25,
		"CKK_TWOFISH":           26,
		"CKK_SECURID":           27,
		"CKK_HOTP":              28,
		"CKK_ACTI":              29,
		"CKK_CAMELLIA":          30,
		"CKK_ARIA":              31,
		"CKK_SHA512_224_HMAC":   32,
		"CKK_SHA512_256_HMAC":   33,
		"CKK_SHA512_T_HMAC":     34,
		"CKK_SHA_1_HMAC":        35,
		"CKK_SHA224_HMAC":       36,
		"CKK_SHA256_HMAC":       37,
		"CKK_SHA384_HMAC":       38,
		"CKK_SHA512_HMAC":       39,
		"CKK_SEED":              40,
		"CKK_GOSTR3410":         41,
		"CKK_GOSTR3411":         42,
		"CKK_GOST28147":         43,
		"CKK_SHA3_224_HMAC":     44,
		"CKK_SHA3_256_HMAC":     45,
		"CKK_SHA3_384_HMAC":     46,
		"CKK_SHA3_512_HMAC":     47,
		"CKK_VENDOR_DEFINED":    48,
	}
)

func (x KeyType) Enum() *KeyType {
	p := new(KeyType)
	*p = x
	return p
}

func (x KeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_keytypes_proto_enumTypes[0].Descriptor()
}

func (KeyType) Type() protoreflect.EnumType {
	return &file_keytypes_proto_enumTypes[0]
}

func (x KeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyType.Descriptor instead.
func (KeyType) EnumDescriptor() ([]byte, []int) {
	return file_keytypes_proto_rawDescGZIP(), []int{0}
}

var File_keytypes_proto protoreflect.FileDescriptor

var file_keytypes_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6b, 0x65, 0x79, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x07, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x0c, 0x74, 0x73, 0x6a, 0x73, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2a, 0xe0, 0x06, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4b, 0x4b, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x43, 0x4b, 0x4b, 0x5f, 0x52, 0x53, 0x41, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43,
	0x4b, 0x4b, 0x5f, 0x44, 0x53, 0x41, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4b, 0x4b, 0x5f,
	0x44, 0x48, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4b, 0x4b, 0x5f, 0x45, 0x43, 0x44, 0x53,
	0x41, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4b, 0x4b, 0x5f, 0x45, 0x43, 0x10, 0x05, 0x12,
	0x10, 0x0a, 0x0c, 0x43, 0x4b, 0x4b, 0x5f, 0x58, 0x39, 0x5f, 0x34, 0x32, 0x5f, 0x44, 0x48, 0x10,
	0x06, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4b, 0x4b, 0x5f, 0x4b, 0x45, 0x41, 0x10, 0x07, 0x12, 0x16,
	0x0a, 0x12, 0x43, 0x4b, 0x4b, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x53, 0x45,
	0x43, 0x52, 0x45, 0x54, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4b, 0x4b, 0x5f, 0x52, 0x43,
	0x32, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4b, 0x4b, 0x5f, 0x52, 0x43, 0x34, 0x10, 0x0a,
	0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4b, 0x4b, 0x5f, 0x44, 0x45, 0x53, 0x10, 0x0b, 0x12, 0x0c, 0x0a,
	0x08, 0x43, 0x4b, 0x4b, 0x5f, 0x44, 0x45, 0x53, 0x32, 0x10, 0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x43,
	0x4b, 0x4b, 0x5f, 0x44, 0x45, 0x53, 0x33, 0x10, 0x0d, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4b, 0x4b,
	0x5f, 0x43, 0x41, 0x53, 0x54, 0x10, 0x0e, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4b, 0x4b, 0x5f, 0x43,
	0x41, 0x53, 0x54, 0x33, 0x10, 0x0f, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4b, 0x4b, 0x5f, 0x43, 0x41,
	0x53, 0x54, 0x35, 0x10, 0x10, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4b, 0x4b, 0x5f, 0x43, 0x41, 0x53,
	0x54, 0x31, 0x32, 0x38, 0x10, 0x11, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4b, 0x4b, 0x5f, 0x52, 0x43,
	0x35, 0x10, 0x12, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4b, 0x4b, 0x5f, 0x49, 0x44, 0x45, 0x41, 0x10,
	0x13, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4b, 0x4b, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x4a, 0x41, 0x43,
	0x4b, 0x10, 0x14, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4b, 0x4b, 0x5f, 0x42, 0x41, 0x54, 0x4f, 0x4e,
	0x10, 0x15, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4b, 0x4b, 0x5f, 0x4a, 0x55, 0x4e, 0x49, 0x50, 0x45,
	0x52, 0x10, 0x16, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4b, 0x4b, 0x5f, 0x43, 0x44, 0x4d, 0x46, 0x10,
	0x17, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4b, 0x4b, 0x5f, 0x41, 0x45, 0x53, 0x10, 0x18, 0x12, 0x10,
	0x0a, 0x0c, 0x43, 0x4b, 0x4b, 0x5f, 0x42, 0x4c, 0x4f, 0x57, 0x46, 0x49, 0x53, 0x48, 0x10, 0x19,
	0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4b, 0x4b, 0x5f, 0x54, 0x57, 0x4f, 0x46, 0x49, 0x53, 0x48, 0x10,
	0x1a, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4b, 0x4b, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x44,
	0x10, 0x1b, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4b, 0x4b, 0x5f, 0x48, 0x4f, 0x54, 0x50, 0x10, 0x1c,
	0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4b, 0x4b, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x10, 0x1d, 0x12, 0x10,
	0x0a, 0x0c, 0x43, 0x4b, 0x4b, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x10, 0x1e,
	0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4b, 0x4b, 0x5f, 0x41, 0x52, 0x49, 0x41, 0x10, 0x1f, 0x12, 0x17,
	0x0a, 0x13, 0x43, 0x4b, 0x4b, 0x5f, 0x53, 0x48, 0x41, 0x35, 0x31, 0x32, 0x5f, 0x32, 0x32, 0x34,
	0x5f, 0x48, 0x4d, 0x41, 0x43, 0x10, 0x20, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4b, 0x4b, 0x5f, 0x53,
	0x48, 0x41, 0x35, 0x31, 0x32, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x48, 0x4d, 0x41, 0x43, 0x10, 0x21,
	0x12, 0x15, 0x0a, 0x11, 0x43, 0x4b, 0x4b, 0x5f, 0x53, 0x48, 0x41, 0x35, 0x31, 0x32, 0x5f, 0x54,
	0x5f, 0x48, 0x4d, 0x41, 0x43, 0x10, 0x22, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4b, 0x4b, 0x5f, 0x53,
	0x48, 0x41, 0x5f, 0x31, 0x5f, 0x48, 0x4d, 0x41, 0x43, 0x10, 0x23, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x4b, 0x4b, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x32, 0x34, 0x5f, 0x48, 0x4d, 0x41, 0x43, 0x10, 0x24,
	0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4b, 0x4b, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x5f, 0x48,
	0x4d, 0x41, 0x43, 0x10, 0x25, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4b, 0x4b, 0x5f, 0x53, 0x48, 0x41,
	0x33, 0x38, 0x34, 0x5f, 0x48, 0x4d, 0x41, 0x43, 0x10, 0x26, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4b,
	0x4b, 0x5f, 0x53, 0x48, 0x41, 0x35, 0x31, 0x32, 0x5f, 0x48, 0x4d, 0x41, 0x43, 0x10, 0x27, 0x12,
	0x0c, 0x0a, 0x08, 0x43, 0x4b, 0x4b, 0x5f, 0x53, 0x45, 0x45, 0x44, 0x10, 0x28, 0x12, 0x11, 0x0a,
	0x0d, 0x43, 0x4b, 0x4b, 0x5f, 0x47, 0x4f, 0x53, 0x54, 0x52, 0x33, 0x34, 0x31, 0x30, 0x10, 0x29,
	0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4b, 0x4b, 0x5f, 0x47, 0x4f, 0x53, 0x54, 0x52, 0x33, 0x34, 0x31,
	0x31, 0x10, 0x2a, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4b, 0x4b, 0x5f, 0x47, 0x4f, 0x53, 0x54, 0x32,
	0x38, 0x31, 0x34, 0x37, 0x10, 0x2b, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4b, 0x4b, 0x5f, 0x53, 0x48,
	0x41, 0x33, 0x5f, 0x32, 0x32, 0x34, 0x5f, 0x48, 0x4d, 0x41, 0x43, 0x10, 0x2c, 0x12, 0x15, 0x0a,
	0x11, 0x43, 0x4b, 0x4b, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x48, 0x4d,
	0x41, 0x43, 0x10, 0x2d, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4b, 0x4b, 0x5f, 0x53, 0x48, 0x41, 0x33,
	0x5f, 0x33, 0x38, 0x34, 0x5f, 0x48, 0x4d, 0x41, 0x43, 0x10, 0x2e, 0x12, 0x15, 0x0a, 0x11, 0x43,
	0x4b, 0x4b, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x5f, 0x35, 0x31, 0x32, 0x5f, 0x48, 0x4d, 0x41, 0x43,
	0x10, 0x2f, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4b, 0x4b, 0x5f, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52,
	0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x30, 0x42, 0x48, 0x5a, 0x26, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4c, 0x4c, 0x4b, 0x65, 0x6e, 0x6e, 0x65,
	0x64, 0x79, 0x2f, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2f, 0x70, 0x61, 0x64, 0x6c, 0x6f,
	0x63, 0x6b, 0x70, 0x62, 0x82, 0xd9, 0x66, 0x10, 0x40, 0x6c, 0x6c, 0x6b, 0x64, 0x65, 0x6d, 0x6f,
	0x2f, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x8a, 0xd9, 0x66, 0x08, 0x6b, 0x65, 0x79, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_keytypes_proto_rawDescOnce sync.Once
	file_keytypes_proto_rawDescData = file_keytypes_proto_rawDesc
)

func file_keytypes_proto_rawDescGZIP() []byte {
	file_keytypes_proto_rawDescOnce.Do(func() {
		file_keytypes_proto_rawDescData = protoimpl.X.CompressGZIP(file_keytypes_proto_rawDescData)
	})
	return file_keytypes_proto_rawDescData
}

var file_keytypes_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_keytypes_proto_goTypes = []interface{}{
	(KeyType)(0), // 0: padlock.KeyType
}
var file_keytypes_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_keytypes_proto_init() }
func file_keytypes_proto_init() {
	if File_keytypes_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_keytypes_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_keytypes_proto_goTypes,
		DependencyIndexes: file_keytypes_proto_depIdxs,
		EnumInfos:         file_keytypes_proto_enumTypes,
	}.Build()
	File_keytypes_proto = out.File
	file_keytypes_proto_rawDesc = nil
	file_keytypes_proto_goTypes = nil
	file_keytypes_proto_depIdxs = nil
}
