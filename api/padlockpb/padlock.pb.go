// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.10.1
// source: padlock.proto

package padlockpb

import (
	_ "github.com/LLKennedy/protoc-gen-tsjson/tsjsonpb"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AuthHello struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AuthHello) Reset() {
	*x = AuthHello{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthHello) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthHello) ProtoMessage() {}

func (x *AuthHello) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthHello.ProtoReflect.Descriptor instead.
func (*AuthHello) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{0}
}

type AuthToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AuthToken) Reset() {
	*x = AuthToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthToken) ProtoMessage() {}

func (x *AuthToken) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthToken.ProtoReflect.Descriptor instead.
func (*AuthToken) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{1}
}

func (x *AuthToken) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ApplicationListModulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth *AuthToken `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *ApplicationListModulesRequest) Reset() {
	*x = ApplicationListModulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationListModulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationListModulesRequest) ProtoMessage() {}

func (x *ApplicationListModulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationListModulesRequest.ProtoReflect.Descriptor instead.
func (*ApplicationListModulesRequest) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{2}
}

func (x *ApplicationListModulesRequest) GetAuth() *AuthToken {
	if x != nil {
		return x.Auth
	}
	return nil
}

type ApplicationListModulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Modules map[string]*ModuleInfo `protobuf:"bytes,1,rep,name=modules,proto3" json:"modules,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ApplicationListModulesResponse) Reset() {
	*x = ApplicationListModulesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationListModulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationListModulesResponse) ProtoMessage() {}

func (x *ApplicationListModulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationListModulesResponse.ProtoReflect.Descriptor instead.
func (*ApplicationListModulesResponse) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{3}
}

func (x *ApplicationListModulesResponse) GetModules() map[string]*ModuleInfo {
	if x != nil {
		return x.Modules
	}
	return nil
}

type ApplicationConnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth   *AuthToken `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Module string     `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`
}

func (x *ApplicationConnectRequest) Reset() {
	*x = ApplicationConnectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationConnectRequest) ProtoMessage() {}

func (x *ApplicationConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationConnectRequest.ProtoReflect.Descriptor instead.
func (*ApplicationConnectRequest) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{4}
}

func (x *ApplicationConnectRequest) GetAuth() *AuthToken {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *ApplicationConnectRequest) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

type ApplicationConnectUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Update:
	//	*ApplicationConnectUpdate_Info
	//	*ApplicationConnectUpdate_ChangedSlots
	Update isApplicationConnectUpdate_Update `protobuf_oneof:"update"`
}

func (x *ApplicationConnectUpdate) Reset() {
	*x = ApplicationConnectUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationConnectUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationConnectUpdate) ProtoMessage() {}

func (x *ApplicationConnectUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationConnectUpdate.ProtoReflect.Descriptor instead.
func (*ApplicationConnectUpdate) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{5}
}

func (m *ApplicationConnectUpdate) GetUpdate() isApplicationConnectUpdate_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (x *ApplicationConnectUpdate) GetInfo() *ModuleInfo {
	if x, ok := x.GetUpdate().(*ApplicationConnectUpdate_Info); ok {
		return x.Info
	}
	return nil
}

func (x *ApplicationConnectUpdate) GetChangedSlots() *ModuleListSlotsResponse {
	if x, ok := x.GetUpdate().(*ApplicationConnectUpdate_ChangedSlots); ok {
		return x.ChangedSlots
	}
	return nil
}

type isApplicationConnectUpdate_Update interface {
	isApplicationConnectUpdate_Update()
}

type ApplicationConnectUpdate_Info struct {
	Info *ModuleInfo `protobuf:"bytes,1,opt,name=info,proto3,oneof"`
}

type ApplicationConnectUpdate_ChangedSlots struct {
	ChangedSlots *ModuleListSlotsResponse `protobuf:"bytes,2,opt,name=changed_slots,json=changedSlots,proto3,oneof"`
}

func (*ApplicationConnectUpdate_Info) isApplicationConnectUpdate_Update() {}

func (*ApplicationConnectUpdate_ChangedSlots) isApplicationConnectUpdate_Update() {}

type ModuleInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth   *AuthToken `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Module string     `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`
}

func (x *ModuleInfoRequest) Reset() {
	*x = ModuleInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleInfoRequest) ProtoMessage() {}

func (x *ModuleInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleInfoRequest.ProtoReflect.Descriptor instead.
func (*ModuleInfoRequest) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{6}
}

func (x *ModuleInfoRequest) GetAuth() *AuthToken {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *ModuleInfoRequest) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

type ModuleInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *ModuleInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *ModuleInfoResponse) Reset() {
	*x = ModuleInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleInfoResponse) ProtoMessage() {}

func (x *ModuleInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleInfoResponse.ProtoReflect.Descriptor instead.
func (*ModuleInfoResponse) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{7}
}

func (x *ModuleInfoResponse) GetInfo() *ModuleInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type ModuleListSlotsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth   *AuthToken `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Module string     `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`
}

func (x *ModuleListSlotsRequest) Reset() {
	*x = ModuleListSlotsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleListSlotsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleListSlotsRequest) ProtoMessage() {}

func (x *ModuleListSlotsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleListSlotsRequest.ProtoReflect.Descriptor instead.
func (*ModuleListSlotsRequest) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{8}
}

func (x *ModuleListSlotsRequest) GetAuth() *AuthToken {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *ModuleListSlotsRequest) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

type ModuleListSlotsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slots []*SlotInfo `protobuf:"bytes,1,rep,name=slots,proto3" json:"slots,omitempty"`
}

func (x *ModuleListSlotsResponse) Reset() {
	*x = ModuleListSlotsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleListSlotsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleListSlotsResponse) ProtoMessage() {}

func (x *ModuleListSlotsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleListSlotsResponse.ProtoReflect.Descriptor instead.
func (*ModuleListSlotsResponse) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{9}
}

func (x *ModuleListSlotsResponse) GetSlots() []*SlotInfo {
	if x != nil {
		return x.Slots
	}
	return nil
}

type SlotID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth   *AuthToken `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Module string     `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`
	Slot   uint64     `protobuf:"varint,3,opt,name=slot,proto3" json:"slot,omitempty"`
}

func (x *SlotID) Reset() {
	*x = SlotID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlotID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlotID) ProtoMessage() {}

func (x *SlotID) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlotID.ProtoReflect.Descriptor instead.
func (*SlotID) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{10}
}

func (x *SlotID) GetAuth() *AuthToken {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *SlotID) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *SlotID) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

type SlotListMechanismsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *SlotID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SlotListMechanismsRequest) Reset() {
	*x = SlotListMechanismsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlotListMechanismsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlotListMechanismsRequest) ProtoMessage() {}

func (x *SlotListMechanismsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlotListMechanismsRequest.ProtoReflect.Descriptor instead.
func (*SlotListMechanismsRequest) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{11}
}

func (x *SlotListMechanismsRequest) GetId() *SlotID {
	if x != nil {
		return x.Id
	}
	return nil
}

type SlotListMechanismsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mechanisms []*SupportedMechanism `protobuf:"bytes,1,rep,name=mechanisms,proto3" json:"mechanisms,omitempty"`
}

func (x *SlotListMechanismsResponse) Reset() {
	*x = SlotListMechanismsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlotListMechanismsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlotListMechanismsResponse) ProtoMessage() {}

func (x *SlotListMechanismsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlotListMechanismsResponse.ProtoReflect.Descriptor instead.
func (*SlotListMechanismsResponse) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{12}
}

func (x *SlotListMechanismsResponse) GetMechanisms() []*SupportedMechanism {
	if x != nil {
		return x.Mechanisms
	}
	return nil
}

type SlotInitTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 *SlotID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SecurityOfficerPin string  `protobuf:"bytes,2,opt,name=security_officer_pin,json=securityOfficerPin,proto3" json:"security_officer_pin,omitempty"`
	TokenLabel         string  `protobuf:"bytes,3,opt,name=token_label,json=tokenLabel,proto3" json:"token_label,omitempty"`
}

func (x *SlotInitTokenRequest) Reset() {
	*x = SlotInitTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlotInitTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlotInitTokenRequest) ProtoMessage() {}

func (x *SlotInitTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlotInitTokenRequest.ProtoReflect.Descriptor instead.
func (*SlotInitTokenRequest) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{13}
}

func (x *SlotInitTokenRequest) GetId() *SlotID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SlotInitTokenRequest) GetSecurityOfficerPin() string {
	if x != nil {
		return x.SecurityOfficerPin
	}
	return ""
}

func (x *SlotInitTokenRequest) GetTokenLabel() string {
	if x != nil {
		return x.TokenLabel
	}
	return ""
}

type SlotInitTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SlotInitTokenResponse) Reset() {
	*x = SlotInitTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlotInitTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlotInitTokenResponse) ProtoMessage() {}

func (x *SlotInitTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlotInitTokenResponse.ProtoReflect.Descriptor instead.
func (*SlotInitTokenResponse) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{14}
}

type SlotOpenSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *SlotID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	WriteSession bool    `protobuf:"varint,2,opt,name=write_session,json=writeSession,proto3" json:"write_session,omitempty"`
}

func (x *SlotOpenSessionRequest) Reset() {
	*x = SlotOpenSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlotOpenSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlotOpenSessionRequest) ProtoMessage() {}

func (x *SlotOpenSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlotOpenSessionRequest.ProtoReflect.Descriptor instead.
func (*SlotOpenSessionRequest) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{15}
}

func (x *SlotOpenSessionRequest) GetId() *SlotID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SlotOpenSessionRequest) GetWriteSession() bool {
	if x != nil {
		return x.WriteSession
	}
	return false
}

type SlotOpenSessionUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Update:
	//	*SlotOpenSessionUpdate_Uuid
	//	*SlotOpenSessionUpdate_LoggedIn
	Update isSlotOpenSessionUpdate_Update `protobuf_oneof:"update"`
}

func (x *SlotOpenSessionUpdate) Reset() {
	*x = SlotOpenSessionUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlotOpenSessionUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlotOpenSessionUpdate) ProtoMessage() {}

func (x *SlotOpenSessionUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlotOpenSessionUpdate.ProtoReflect.Descriptor instead.
func (*SlotOpenSessionUpdate) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{16}
}

func (m *SlotOpenSessionUpdate) GetUpdate() isSlotOpenSessionUpdate_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (x *SlotOpenSessionUpdate) GetUuid() string {
	if x, ok := x.GetUpdate().(*SlotOpenSessionUpdate_Uuid); ok {
		return x.Uuid
	}
	return ""
}

func (x *SlotOpenSessionUpdate) GetLoggedIn() bool {
	if x, ok := x.GetUpdate().(*SlotOpenSessionUpdate_LoggedIn); ok {
		return x.LoggedIn
	}
	return false
}

type isSlotOpenSessionUpdate_Update interface {
	isSlotOpenSessionUpdate_Update()
}

type SlotOpenSessionUpdate_Uuid struct {
	// First response must be this UUID
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3,oneof"`
}

type SlotOpenSessionUpdate_LoggedIn struct {
	// Further responses must not be UUID
	LoggedIn bool `protobuf:"varint,2,opt,name=logged_in,json=loggedIn,proto3,oneof"`
}

func (*SlotOpenSessionUpdate_Uuid) isSlotOpenSessionUpdate_Update() {}

func (*SlotOpenSessionUpdate_LoggedIn) isSlotOpenSessionUpdate_Update() {}

type SessionID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth *AuthToken `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Uuid string     `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *SessionID) Reset() {
	*x = SessionID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionID) ProtoMessage() {}

func (x *SessionID) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionID.ProtoReflect.Descriptor instead.
func (*SessionID) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{17}
}

func (x *SessionID) GetAuth() *AuthToken {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *SessionID) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type SessionCloseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *SessionID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SessionCloseRequest) Reset() {
	*x = SessionCloseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionCloseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionCloseRequest) ProtoMessage() {}

func (x *SessionCloseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionCloseRequest.ProtoReflect.Descriptor instead.
func (*SessionCloseRequest) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{18}
}

func (x *SessionCloseRequest) GetId() *SessionID {
	if x != nil {
		return x.Id
	}
	return nil
}

type SessionCloseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SessionCloseResponse) Reset() {
	*x = SessionCloseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionCloseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionCloseResponse) ProtoMessage() {}

func (x *SessionCloseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionCloseResponse.ProtoReflect.Descriptor instead.
func (*SessionCloseResponse) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{19}
}

type SessionLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     *SessionID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Pin                    string     `protobuf:"bytes,2,opt,name=pin,proto3" json:"pin,omitempty"`
	LoginAsSecurityOfficer bool       `protobuf:"varint,3,opt,name=login_as_security_officer,json=loginAsSecurityOfficer,proto3" json:"login_as_security_officer,omitempty"`
}

func (x *SessionLoginRequest) Reset() {
	*x = SessionLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionLoginRequest) ProtoMessage() {}

func (x *SessionLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionLoginRequest.ProtoReflect.Descriptor instead.
func (*SessionLoginRequest) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{20}
}

func (x *SessionLoginRequest) GetId() *SessionID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SessionLoginRequest) GetPin() string {
	if x != nil {
		return x.Pin
	}
	return ""
}

func (x *SessionLoginRequest) GetLoginAsSecurityOfficer() bool {
	if x != nil {
		return x.LoginAsSecurityOfficer
	}
	return false
}

type SessionLoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SessionLoginResponse) Reset() {
	*x = SessionLoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionLoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionLoginResponse) ProtoMessage() {}

func (x *SessionLoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionLoginResponse.ProtoReflect.Descriptor instead.
func (*SessionLoginResponse) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{21}
}

type SessionLogoutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SessionLogoutResponse) Reset() {
	*x = SessionLogoutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionLogoutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionLogoutResponse) ProtoMessage() {}

func (x *SessionLogoutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionLogoutResponse.ProtoReflect.Descriptor instead.
func (*SessionLogoutResponse) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{22}
}

type SessionListObjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *SessionID   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Template []*Attribute `protobuf:"bytes,2,rep,name=template,proto3" json:"template,omitempty"`
}

func (x *SessionListObjectsRequest) Reset() {
	*x = SessionListObjectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionListObjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionListObjectsRequest) ProtoMessage() {}

func (x *SessionListObjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionListObjectsRequest.ProtoReflect.Descriptor instead.
func (*SessionListObjectsRequest) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{23}
}

func (x *SessionListObjectsRequest) GetId() *SessionID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SessionListObjectsRequest) GetTemplate() []*Attribute {
	if x != nil {
		return x.Template
	}
	return nil
}

type SessionCreateObjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *SessionID   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Attributes []*Attribute `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *SessionCreateObjectRequest) Reset() {
	*x = SessionCreateObjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionCreateObjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionCreateObjectRequest) ProtoMessage() {}

func (x *SessionCreateObjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionCreateObjectRequest.ProtoReflect.Descriptor instead.
func (*SessionCreateObjectRequest) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{24}
}

func (x *SessionCreateObjectRequest) GetId() *SessionID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SessionCreateObjectRequest) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type SessionGenerateRandomRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *SessionID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Length uint32     `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
}

func (x *SessionGenerateRandomRequest) Reset() {
	*x = SessionGenerateRandomRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionGenerateRandomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionGenerateRandomRequest) ProtoMessage() {}

func (x *SessionGenerateRandomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionGenerateRandomRequest.ProtoReflect.Descriptor instead.
func (*SessionGenerateRandomRequest) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{25}
}

func (x *SessionGenerateRandomRequest) GetId() *SessionID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SessionGenerateRandomRequest) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

type SessionGenerateRandomResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SessionGenerateRandomResponse) Reset() {
	*x = SessionGenerateRandomResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionGenerateRandomResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionGenerateRandomResponse) ProtoMessage() {}

func (x *SessionGenerateRandomResponse) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionGenerateRandomResponse.ProtoReflect.Descriptor instead.
func (*SessionGenerateRandomResponse) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{26}
}

func (x *SessionGenerateRandomResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type SessionGenerateKeyPairRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                *SessionID   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mech              *Mechanism   `protobuf:"bytes,2,opt,name=mech,proto3" json:"mech,omitempty"`
	PrivateAttributes []*Attribute `protobuf:"bytes,3,rep,name=private_attributes,json=privateAttributes,proto3" json:"private_attributes,omitempty"`
	PublicAttributes  []*Attribute `protobuf:"bytes,4,rep,name=public_attributes,json=publicAttributes,proto3" json:"public_attributes,omitempty"`
}

func (x *SessionGenerateKeyPairRequest) Reset() {
	*x = SessionGenerateKeyPairRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionGenerateKeyPairRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionGenerateKeyPairRequest) ProtoMessage() {}

func (x *SessionGenerateKeyPairRequest) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionGenerateKeyPairRequest.ProtoReflect.Descriptor instead.
func (*SessionGenerateKeyPairRequest) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{27}
}

func (x *SessionGenerateKeyPairRequest) GetId() *SessionID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SessionGenerateKeyPairRequest) GetMech() *Mechanism {
	if x != nil {
		return x.Mech
	}
	return nil
}

func (x *SessionGenerateKeyPairRequest) GetPrivateAttributes() []*Attribute {
	if x != nil {
		return x.PrivateAttributes
	}
	return nil
}

func (x *SessionGenerateKeyPairRequest) GetPublicAttributes() []*Attribute {
	if x != nil {
		return x.PublicAttributes
	}
	return nil
}

type SessionGenerateKeyPairResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Private *P11Object `protobuf:"bytes,1,opt,name=private,proto3" json:"private,omitempty"`
	Public  *P11Object `protobuf:"bytes,2,opt,name=public,proto3" json:"public,omitempty"`
}

func (x *SessionGenerateKeyPairResponse) Reset() {
	*x = SessionGenerateKeyPairResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionGenerateKeyPairResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionGenerateKeyPairResponse) ProtoMessage() {}

func (x *SessionGenerateKeyPairResponse) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionGenerateKeyPairResponse.ProtoReflect.Descriptor instead.
func (*SessionGenerateKeyPairResponse) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{28}
}

func (x *SessionGenerateKeyPairResponse) GetPrivate() *P11Object {
	if x != nil {
		return x.Private
	}
	return nil
}

func (x *SessionGenerateKeyPairResponse) GetPublic() *P11Object {
	if x != nil {
		return x.Public
	}
	return nil
}

type SessionGenerateKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *SessionID   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mech       *Mechanism   `protobuf:"bytes,2,opt,name=mech,proto3" json:"mech,omitempty"`
	Attributes []*Attribute `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *SessionGenerateKeyRequest) Reset() {
	*x = SessionGenerateKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionGenerateKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionGenerateKeyRequest) ProtoMessage() {}

func (x *SessionGenerateKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionGenerateKeyRequest.ProtoReflect.Descriptor instead.
func (*SessionGenerateKeyRequest) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{29}
}

func (x *SessionGenerateKeyRequest) GetId() *SessionID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SessionGenerateKeyRequest) GetMech() *Mechanism {
	if x != nil {
		return x.Mech
	}
	return nil
}

func (x *SessionGenerateKeyRequest) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type ObjectID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *SessionID `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	ObjectId  string     `protobuf:"bytes,2,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
}

func (x *ObjectID) Reset() {
	*x = ObjectID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectID) ProtoMessage() {}

func (x *ObjectID) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectID.ProtoReflect.Descriptor instead.
func (*ObjectID) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{30}
}

func (x *ObjectID) GetSessionId() *SessionID {
	if x != nil {
		return x.SessionId
	}
	return nil
}

func (x *ObjectID) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

type ObjectListAttributeValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId            *ObjectID       `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	RequestedAttributes []AttributeType `protobuf:"varint,3,rep,packed,name=requested_attributes,json=requestedAttributes,proto3,enum=padlock.AttributeType" json:"requested_attributes,omitempty"`
}

func (x *ObjectListAttributeValuesRequest) Reset() {
	*x = ObjectListAttributeValuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectListAttributeValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectListAttributeValuesRequest) ProtoMessage() {}

func (x *ObjectListAttributeValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectListAttributeValuesRequest.ProtoReflect.Descriptor instead.
func (*ObjectListAttributeValuesRequest) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{31}
}

func (x *ObjectListAttributeValuesRequest) GetObjectId() *ObjectID {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

func (x *ObjectListAttributeValuesRequest) GetRequestedAttributes() []AttributeType {
	if x != nil {
		return x.RequestedAttributes
	}
	return nil
}

type ObjectListAttributeValuesUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Update:
	//	*ObjectListAttributeValuesUpdate_Attribute
	//	*ObjectListAttributeValuesUpdate_NotFound
	Update isObjectListAttributeValuesUpdate_Update `protobuf_oneof:"update"`
}

func (x *ObjectListAttributeValuesUpdate) Reset() {
	*x = ObjectListAttributeValuesUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectListAttributeValuesUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectListAttributeValuesUpdate) ProtoMessage() {}

func (x *ObjectListAttributeValuesUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectListAttributeValuesUpdate.ProtoReflect.Descriptor instead.
func (*ObjectListAttributeValuesUpdate) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{32}
}

func (m *ObjectListAttributeValuesUpdate) GetUpdate() isObjectListAttributeValuesUpdate_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (x *ObjectListAttributeValuesUpdate) GetAttribute() *Attribute {
	if x, ok := x.GetUpdate().(*ObjectListAttributeValuesUpdate_Attribute); ok {
		return x.Attribute
	}
	return nil
}

func (x *ObjectListAttributeValuesUpdate) GetNotFound() AttributeType {
	if x, ok := x.GetUpdate().(*ObjectListAttributeValuesUpdate_NotFound); ok {
		return x.NotFound
	}
	return AttributeType_CKA_UNDEFINED_UNKNOWN
}

type isObjectListAttributeValuesUpdate_Update interface {
	isObjectListAttributeValuesUpdate_Update()
}

type ObjectListAttributeValuesUpdate_Attribute struct {
	Attribute *Attribute `protobuf:"bytes,1,opt,name=attribute,proto3,oneof"`
}

type ObjectListAttributeValuesUpdate_NotFound struct {
	NotFound AttributeType `protobuf:"varint,2,opt,name=not_found,json=notFound,proto3,enum=padlock.AttributeType,oneof"`
}

func (*ObjectListAttributeValuesUpdate_Attribute) isObjectListAttributeValuesUpdate_Update() {}

func (*ObjectListAttributeValuesUpdate_NotFound) isObjectListAttributeValuesUpdate_Update() {}

type ObjectEncryptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId  *ObjectID    `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Mechs     []*Mechanism `protobuf:"bytes,2,rep,name=mechs,proto3" json:"mechs,omitempty"`
	PlainText []byte       `protobuf:"bytes,3,opt,name=plain_text,json=plainText,proto3" json:"plain_text,omitempty"`
}

func (x *ObjectEncryptRequest) Reset() {
	*x = ObjectEncryptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectEncryptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectEncryptRequest) ProtoMessage() {}

func (x *ObjectEncryptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectEncryptRequest.ProtoReflect.Descriptor instead.
func (*ObjectEncryptRequest) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{33}
}

func (x *ObjectEncryptRequest) GetObjectId() *ObjectID {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

func (x *ObjectEncryptRequest) GetMechs() []*Mechanism {
	if x != nil {
		return x.Mechs
	}
	return nil
}

func (x *ObjectEncryptRequest) GetPlainText() []byte {
	if x != nil {
		return x.PlainText
	}
	return nil
}

type ObjectEncryptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Encrypted []byte `protobuf:"bytes,1,opt,name=encrypted,proto3" json:"encrypted,omitempty"`
}

func (x *ObjectEncryptResponse) Reset() {
	*x = ObjectEncryptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectEncryptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectEncryptResponse) ProtoMessage() {}

func (x *ObjectEncryptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectEncryptResponse.ProtoReflect.Descriptor instead.
func (*ObjectEncryptResponse) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{34}
}

func (x *ObjectEncryptResponse) GetEncrypted() []byte {
	if x != nil {
		return x.Encrypted
	}
	return nil
}

type ObjectEncryptSegmentedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Stages:
	//	*ObjectEncryptSegmentedRequest_First
	//	*ObjectEncryptSegmentedRequest_MessagePart
	//	*ObjectEncryptSegmentedRequest_Last
	Stages isObjectEncryptSegmentedRequest_Stages `protobuf_oneof:"stages"`
}

func (x *ObjectEncryptSegmentedRequest) Reset() {
	*x = ObjectEncryptSegmentedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectEncryptSegmentedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectEncryptSegmentedRequest) ProtoMessage() {}

func (x *ObjectEncryptSegmentedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectEncryptSegmentedRequest.ProtoReflect.Descriptor instead.
func (*ObjectEncryptSegmentedRequest) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{35}
}

func (m *ObjectEncryptSegmentedRequest) GetStages() isObjectEncryptSegmentedRequest_Stages {
	if m != nil {
		return m.Stages
	}
	return nil
}

func (x *ObjectEncryptSegmentedRequest) GetFirst() *ObjectCryptoSegmentedInit {
	if x, ok := x.GetStages().(*ObjectEncryptSegmentedRequest_First); ok {
		return x.First
	}
	return nil
}

func (x *ObjectEncryptSegmentedRequest) GetMessagePart() []byte {
	if x, ok := x.GetStages().(*ObjectEncryptSegmentedRequest_MessagePart); ok {
		return x.MessagePart
	}
	return nil
}

func (x *ObjectEncryptSegmentedRequest) GetLast() *empty.Empty {
	if x, ok := x.GetStages().(*ObjectEncryptSegmentedRequest_Last); ok {
		return x.Last
	}
	return nil
}

type isObjectEncryptSegmentedRequest_Stages interface {
	isObjectEncryptSegmentedRequest_Stages()
}

type ObjectEncryptSegmentedRequest_First struct {
	First *ObjectCryptoSegmentedInit `protobuf:"bytes,1,opt,name=first,proto3,oneof"`
}

type ObjectEncryptSegmentedRequest_MessagePart struct {
	MessagePart []byte `protobuf:"bytes,2,opt,name=message_part,json=messagePart,proto3,oneof"`
}

type ObjectEncryptSegmentedRequest_Last struct {
	Last *empty.Empty `protobuf:"bytes,3,opt,name=last,proto3,oneof"`
}

func (*ObjectEncryptSegmentedRequest_First) isObjectEncryptSegmentedRequest_Stages() {}

func (*ObjectEncryptSegmentedRequest_MessagePart) isObjectEncryptSegmentedRequest_Stages() {}

func (*ObjectEncryptSegmentedRequest_Last) isObjectEncryptSegmentedRequest_Stages() {}

type ObjectCryptoSegmentedInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *ObjectID    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mechs []*Mechanism `protobuf:"bytes,2,rep,name=mechs,proto3" json:"mechs,omitempty"`
}

func (x *ObjectCryptoSegmentedInit) Reset() {
	*x = ObjectCryptoSegmentedInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectCryptoSegmentedInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectCryptoSegmentedInit) ProtoMessage() {}

func (x *ObjectCryptoSegmentedInit) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectCryptoSegmentedInit.ProtoReflect.Descriptor instead.
func (*ObjectCryptoSegmentedInit) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{36}
}

func (x *ObjectCryptoSegmentedInit) GetId() *ObjectID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ObjectCryptoSegmentedInit) GetMechs() []*Mechanism {
	if x != nil {
		return x.Mechs
	}
	return nil
}

type ObjectEncryptSegmentedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptedPart []byte `protobuf:"bytes,1,opt,name=encrypted_part,json=encryptedPart,proto3" json:"encrypted_part,omitempty"`
}

func (x *ObjectEncryptSegmentedResponse) Reset() {
	*x = ObjectEncryptSegmentedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectEncryptSegmentedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectEncryptSegmentedResponse) ProtoMessage() {}

func (x *ObjectEncryptSegmentedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectEncryptSegmentedResponse.ProtoReflect.Descriptor instead.
func (*ObjectEncryptSegmentedResponse) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{37}
}

func (x *ObjectEncryptSegmentedResponse) GetEncryptedPart() []byte {
	if x != nil {
		return x.EncryptedPart
	}
	return nil
}

type ObjectDecryptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId  *ObjectID    `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Mechs     []*Mechanism `protobuf:"bytes,2,rep,name=mechs,proto3" json:"mechs,omitempty"`
	Encrypted []byte       `protobuf:"bytes,3,opt,name=encrypted,proto3" json:"encrypted,omitempty"`
}

func (x *ObjectDecryptRequest) Reset() {
	*x = ObjectDecryptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectDecryptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectDecryptRequest) ProtoMessage() {}

func (x *ObjectDecryptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectDecryptRequest.ProtoReflect.Descriptor instead.
func (*ObjectDecryptRequest) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{38}
}

func (x *ObjectDecryptRequest) GetObjectId() *ObjectID {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

func (x *ObjectDecryptRequest) GetMechs() []*Mechanism {
	if x != nil {
		return x.Mechs
	}
	return nil
}

func (x *ObjectDecryptRequest) GetEncrypted() []byte {
	if x != nil {
		return x.Encrypted
	}
	return nil
}

type ObjectDecryptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlainText []byte `protobuf:"bytes,1,opt,name=plain_text,json=plainText,proto3" json:"plain_text,omitempty"`
}

func (x *ObjectDecryptResponse) Reset() {
	*x = ObjectDecryptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectDecryptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectDecryptResponse) ProtoMessage() {}

func (x *ObjectDecryptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectDecryptResponse.ProtoReflect.Descriptor instead.
func (*ObjectDecryptResponse) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{39}
}

func (x *ObjectDecryptResponse) GetPlainText() []byte {
	if x != nil {
		return x.PlainText
	}
	return nil
}

type ObjectDecryptSegmentedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Stages:
	//	*ObjectDecryptSegmentedRequest_First
	//	*ObjectDecryptSegmentedRequest_MessagePart
	//	*ObjectDecryptSegmentedRequest_Last
	Stages isObjectDecryptSegmentedRequest_Stages `protobuf_oneof:"stages"`
}

func (x *ObjectDecryptSegmentedRequest) Reset() {
	*x = ObjectDecryptSegmentedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectDecryptSegmentedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectDecryptSegmentedRequest) ProtoMessage() {}

func (x *ObjectDecryptSegmentedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectDecryptSegmentedRequest.ProtoReflect.Descriptor instead.
func (*ObjectDecryptSegmentedRequest) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{40}
}

func (m *ObjectDecryptSegmentedRequest) GetStages() isObjectDecryptSegmentedRequest_Stages {
	if m != nil {
		return m.Stages
	}
	return nil
}

func (x *ObjectDecryptSegmentedRequest) GetFirst() *ObjectCryptoSegmentedInit {
	if x, ok := x.GetStages().(*ObjectDecryptSegmentedRequest_First); ok {
		return x.First
	}
	return nil
}

func (x *ObjectDecryptSegmentedRequest) GetMessagePart() []byte {
	if x, ok := x.GetStages().(*ObjectDecryptSegmentedRequest_MessagePart); ok {
		return x.MessagePart
	}
	return nil
}

func (x *ObjectDecryptSegmentedRequest) GetLast() *empty.Empty {
	if x, ok := x.GetStages().(*ObjectDecryptSegmentedRequest_Last); ok {
		return x.Last
	}
	return nil
}

type isObjectDecryptSegmentedRequest_Stages interface {
	isObjectDecryptSegmentedRequest_Stages()
}

type ObjectDecryptSegmentedRequest_First struct {
	First *ObjectCryptoSegmentedInit `protobuf:"bytes,1,opt,name=first,proto3,oneof"`
}

type ObjectDecryptSegmentedRequest_MessagePart struct {
	MessagePart []byte `protobuf:"bytes,2,opt,name=message_part,json=messagePart,proto3,oneof"`
}

type ObjectDecryptSegmentedRequest_Last struct {
	Last *empty.Empty `protobuf:"bytes,3,opt,name=last,proto3,oneof"`
}

func (*ObjectDecryptSegmentedRequest_First) isObjectDecryptSegmentedRequest_Stages() {}

func (*ObjectDecryptSegmentedRequest_MessagePart) isObjectDecryptSegmentedRequest_Stages() {}

func (*ObjectDecryptSegmentedRequest_Last) isObjectDecryptSegmentedRequest_Stages() {}

type ObjectDecryptSegmentedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlainTextPart []byte `protobuf:"bytes,1,opt,name=plain_text_part,json=plainTextPart,proto3" json:"plain_text_part,omitempty"`
}

func (x *ObjectDecryptSegmentedResponse) Reset() {
	*x = ObjectDecryptSegmentedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectDecryptSegmentedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectDecryptSegmentedResponse) ProtoMessage() {}

func (x *ObjectDecryptSegmentedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectDecryptSegmentedResponse.ProtoReflect.Descriptor instead.
func (*ObjectDecryptSegmentedResponse) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{41}
}

func (x *ObjectDecryptSegmentedResponse) GetPlainTextPart() []byte {
	if x != nil {
		return x.PlainTextPart
	}
	return nil
}

type ObjectSignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId *ObjectID    `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Mechs    []*Mechanism `protobuf:"bytes,2,rep,name=mechs,proto3" json:"mechs,omitempty"`
	Message  []byte       `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ObjectSignRequest) Reset() {
	*x = ObjectSignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectSignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectSignRequest) ProtoMessage() {}

func (x *ObjectSignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectSignRequest.ProtoReflect.Descriptor instead.
func (*ObjectSignRequest) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{42}
}

func (x *ObjectSignRequest) GetObjectId() *ObjectID {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

func (x *ObjectSignRequest) GetMechs() []*Mechanism {
	if x != nil {
		return x.Mechs
	}
	return nil
}

func (x *ObjectSignRequest) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

type ObjectSignResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ObjectSignResponse) Reset() {
	*x = ObjectSignResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectSignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectSignResponse) ProtoMessage() {}

func (x *ObjectSignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectSignResponse.ProtoReflect.Descriptor instead.
func (*ObjectSignResponse) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{43}
}

func (x *ObjectSignResponse) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ObjectSignSegmentedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Stages:
	//	*ObjectSignSegmentedRequest_First
	//	*ObjectSignSegmentedRequest_MessagePart
	//	*ObjectSignSegmentedRequest_Last
	Stages isObjectSignSegmentedRequest_Stages `protobuf_oneof:"stages"`
}

func (x *ObjectSignSegmentedRequest) Reset() {
	*x = ObjectSignSegmentedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectSignSegmentedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectSignSegmentedRequest) ProtoMessage() {}

func (x *ObjectSignSegmentedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectSignSegmentedRequest.ProtoReflect.Descriptor instead.
func (*ObjectSignSegmentedRequest) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{44}
}

func (m *ObjectSignSegmentedRequest) GetStages() isObjectSignSegmentedRequest_Stages {
	if m != nil {
		return m.Stages
	}
	return nil
}

func (x *ObjectSignSegmentedRequest) GetFirst() *ObjectCryptoSegmentedInit {
	if x, ok := x.GetStages().(*ObjectSignSegmentedRequest_First); ok {
		return x.First
	}
	return nil
}

func (x *ObjectSignSegmentedRequest) GetMessagePart() []byte {
	if x, ok := x.GetStages().(*ObjectSignSegmentedRequest_MessagePart); ok {
		return x.MessagePart
	}
	return nil
}

func (x *ObjectSignSegmentedRequest) GetLast() *empty.Empty {
	if x, ok := x.GetStages().(*ObjectSignSegmentedRequest_Last); ok {
		return x.Last
	}
	return nil
}

type isObjectSignSegmentedRequest_Stages interface {
	isObjectSignSegmentedRequest_Stages()
}

type ObjectSignSegmentedRequest_First struct {
	First *ObjectCryptoSegmentedInit `protobuf:"bytes,1,opt,name=first,proto3,oneof"`
}

type ObjectSignSegmentedRequest_MessagePart struct {
	MessagePart []byte `protobuf:"bytes,2,opt,name=message_part,json=messagePart,proto3,oneof"`
}

type ObjectSignSegmentedRequest_Last struct {
	Last *empty.Empty `protobuf:"bytes,3,opt,name=last,proto3,oneof"`
}

func (*ObjectSignSegmentedRequest_First) isObjectSignSegmentedRequest_Stages() {}

func (*ObjectSignSegmentedRequest_MessagePart) isObjectSignSegmentedRequest_Stages() {}

func (*ObjectSignSegmentedRequest_Last) isObjectSignSegmentedRequest_Stages() {}

type ObjectSignSegmentedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ObjectSignSegmentedResponse) Reset() {
	*x = ObjectSignSegmentedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectSignSegmentedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectSignSegmentedResponse) ProtoMessage() {}

func (x *ObjectSignSegmentedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectSignSegmentedResponse.ProtoReflect.Descriptor instead.
func (*ObjectSignSegmentedResponse) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{45}
}

func (x *ObjectSignSegmentedResponse) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ObjectVerifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId  *ObjectID    `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Mechs     []*Mechanism `protobuf:"bytes,2,rep,name=mechs,proto3" json:"mechs,omitempty"`
	Message   []byte       `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Signature []byte       `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ObjectVerifyRequest) Reset() {
	*x = ObjectVerifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectVerifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectVerifyRequest) ProtoMessage() {}

func (x *ObjectVerifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectVerifyRequest.ProtoReflect.Descriptor instead.
func (*ObjectVerifyRequest) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{46}
}

func (x *ObjectVerifyRequest) GetObjectId() *ObjectID {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

func (x *ObjectVerifyRequest) GetMechs() []*Mechanism {
	if x != nil {
		return x.Mechs
	}
	return nil
}

func (x *ObjectVerifyRequest) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ObjectVerifyRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ObjectVerifyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid bool `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *ObjectVerifyResponse) Reset() {
	*x = ObjectVerifyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectVerifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectVerifyResponse) ProtoMessage() {}

func (x *ObjectVerifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectVerifyResponse.ProtoReflect.Descriptor instead.
func (*ObjectVerifyResponse) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{47}
}

func (x *ObjectVerifyResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type ObjectVerifySegmentedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Stages:
	//	*ObjectVerifySegmentedRequest_First
	//	*ObjectVerifySegmentedRequest_MessagePart
	//	*ObjectVerifySegmentedRequest_Signature
	Stages isObjectVerifySegmentedRequest_Stages `protobuf_oneof:"stages"`
}

func (x *ObjectVerifySegmentedRequest) Reset() {
	*x = ObjectVerifySegmentedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectVerifySegmentedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectVerifySegmentedRequest) ProtoMessage() {}

func (x *ObjectVerifySegmentedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectVerifySegmentedRequest.ProtoReflect.Descriptor instead.
func (*ObjectVerifySegmentedRequest) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{48}
}

func (m *ObjectVerifySegmentedRequest) GetStages() isObjectVerifySegmentedRequest_Stages {
	if m != nil {
		return m.Stages
	}
	return nil
}

func (x *ObjectVerifySegmentedRequest) GetFirst() *ObjectCryptoSegmentedInit {
	if x, ok := x.GetStages().(*ObjectVerifySegmentedRequest_First); ok {
		return x.First
	}
	return nil
}

func (x *ObjectVerifySegmentedRequest) GetMessagePart() []byte {
	if x, ok := x.GetStages().(*ObjectVerifySegmentedRequest_MessagePart); ok {
		return x.MessagePart
	}
	return nil
}

func (x *ObjectVerifySegmentedRequest) GetSignature() []byte {
	if x, ok := x.GetStages().(*ObjectVerifySegmentedRequest_Signature); ok {
		return x.Signature
	}
	return nil
}

type isObjectVerifySegmentedRequest_Stages interface {
	isObjectVerifySegmentedRequest_Stages()
}

type ObjectVerifySegmentedRequest_First struct {
	First *ObjectCryptoSegmentedInit `protobuf:"bytes,1,opt,name=first,proto3,oneof"`
}

type ObjectVerifySegmentedRequest_MessagePart struct {
	MessagePart []byte `protobuf:"bytes,2,opt,name=message_part,json=messagePart,proto3,oneof"`
}

type ObjectVerifySegmentedRequest_Signature struct {
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3,oneof"`
}

func (*ObjectVerifySegmentedRequest_First) isObjectVerifySegmentedRequest_Stages() {}

func (*ObjectVerifySegmentedRequest_MessagePart) isObjectVerifySegmentedRequest_Stages() {}

func (*ObjectVerifySegmentedRequest_Signature) isObjectVerifySegmentedRequest_Stages() {}

type ObjectVerifySegmentedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid bool `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *ObjectVerifySegmentedResponse) Reset() {
	*x = ObjectVerifySegmentedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectVerifySegmentedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectVerifySegmentedResponse) ProtoMessage() {}

func (x *ObjectVerifySegmentedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectVerifySegmentedResponse.ProtoReflect.Descriptor instead.
func (*ObjectVerifySegmentedResponse) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{49}
}

func (x *ObjectVerifySegmentedResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type ObjectWrapKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WrappingKey *ObjectID    `protobuf:"bytes,1,opt,name=wrapping_key,json=wrappingKey,proto3" json:"wrapping_key,omitempty"`
	Mechs       []*Mechanism `protobuf:"bytes,2,rep,name=mechs,proto3" json:"mechs,omitempty"`
	KeyToWrap   *ObjectID    `protobuf:"bytes,3,opt,name=key_to_wrap,json=keyToWrap,proto3" json:"key_to_wrap,omitempty"`
}

func (x *ObjectWrapKeyRequest) Reset() {
	*x = ObjectWrapKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectWrapKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectWrapKeyRequest) ProtoMessage() {}

func (x *ObjectWrapKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectWrapKeyRequest.ProtoReflect.Descriptor instead.
func (*ObjectWrapKeyRequest) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{50}
}

func (x *ObjectWrapKeyRequest) GetWrappingKey() *ObjectID {
	if x != nil {
		return x.WrappingKey
	}
	return nil
}

func (x *ObjectWrapKeyRequest) GetMechs() []*Mechanism {
	if x != nil {
		return x.Mechs
	}
	return nil
}

func (x *ObjectWrapKeyRequest) GetKeyToWrap() *ObjectID {
	if x != nil {
		return x.KeyToWrap
	}
	return nil
}

type ObjectWrapKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wrapped []byte `protobuf:"bytes,1,opt,name=wrapped,proto3" json:"wrapped,omitempty"`
}

func (x *ObjectWrapKeyResponse) Reset() {
	*x = ObjectWrapKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectWrapKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectWrapKeyResponse) ProtoMessage() {}

func (x *ObjectWrapKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectWrapKeyResponse.ProtoReflect.Descriptor instead.
func (*ObjectWrapKeyResponse) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{51}
}

func (x *ObjectWrapKeyResponse) GetWrapped() []byte {
	if x != nil {
		return x.Wrapped
	}
	return nil
}

type ObjectUnwrapKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId   *ObjectID    `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Mechs      []*Mechanism `protobuf:"bytes,2,rep,name=mechs,proto3" json:"mechs,omitempty"`
	Wrapped    []byte       `protobuf:"bytes,3,opt,name=wrapped,proto3" json:"wrapped,omitempty"`
	Attributes []*Attribute `protobuf:"bytes,4,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *ObjectUnwrapKeyRequest) Reset() {
	*x = ObjectUnwrapKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectUnwrapKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectUnwrapKeyRequest) ProtoMessage() {}

func (x *ObjectUnwrapKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectUnwrapKeyRequest.ProtoReflect.Descriptor instead.
func (*ObjectUnwrapKeyRequest) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{52}
}

func (x *ObjectUnwrapKeyRequest) GetObjectId() *ObjectID {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

func (x *ObjectUnwrapKeyRequest) GetMechs() []*Mechanism {
	if x != nil {
		return x.Mechs
	}
	return nil
}

func (x *ObjectUnwrapKeyRequest) GetWrapped() []byte {
	if x != nil {
		return x.Wrapped
	}
	return nil
}

func (x *ObjectUnwrapKeyRequest) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type ObjectDestroyObjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId *ObjectID `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
}

func (x *ObjectDestroyObjectRequest) Reset() {
	*x = ObjectDestroyObjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectDestroyObjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectDestroyObjectRequest) ProtoMessage() {}

func (x *ObjectDestroyObjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectDestroyObjectRequest.ProtoReflect.Descriptor instead.
func (*ObjectDestroyObjectRequest) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{53}
}

func (x *ObjectDestroyObjectRequest) GetObjectId() *ObjectID {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

type ObjectDestroyObjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ObjectDestroyObjectResponse) Reset() {
	*x = ObjectDestroyObjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectDestroyObjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectDestroyObjectResponse) ProtoMessage() {}

func (x *ObjectDestroyObjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectDestroyObjectResponse.ProtoReflect.Descriptor instead.
func (*ObjectDestroyObjectResponse) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{54}
}

type ObjectCopyObjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId   *ObjectID    `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Attributes []*Attribute `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *ObjectCopyObjectRequest) Reset() {
	*x = ObjectCopyObjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectCopyObjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectCopyObjectRequest) ProtoMessage() {}

func (x *ObjectCopyObjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectCopyObjectRequest.ProtoReflect.Descriptor instead.
func (*ObjectCopyObjectRequest) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{55}
}

func (x *ObjectCopyObjectRequest) GetObjectId() *ObjectID {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

func (x *ObjectCopyObjectRequest) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type ObjectCopyObjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ObjectCopyObjectResponse) Reset() {
	*x = ObjectCopyObjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_padlock_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectCopyObjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectCopyObjectResponse) ProtoMessage() {}

func (x *ObjectCopyObjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_padlock_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectCopyObjectResponse.ProtoReflect.Descriptor instead.
func (*ObjectCopyObjectResponse) Descriptor() ([]byte, []int) {
	return file_padlock_proto_rawDescGZIP(), []int{56}
}

var File_padlock_proto protoreflect.FileDescriptor

var file_padlock_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x0c, 0x74, 0x73, 0x6a, 0x73, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x70, 0x6b, 0x63, 0x73, 0x31, 0x31, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x0b, 0x0a, 0x09, 0x41, 0x75, 0x74, 0x68, 0x48, 0x65, 0x6c, 0x6c, 0x6f,
	0x22, 0x1f, 0x0a, 0x09, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x47, 0x0a, 0x1d, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0xc1, 0x01, 0x0a, 0x1e, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a,
	0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x4f, 0x0a,
	0x0c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5b,
	0x0a, 0x19, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x61, 0x64, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x18,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x73,
	0x6c, 0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x61, 0x64,
	0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x6c, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0c,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x42, 0x08, 0x0a, 0x06,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x53, 0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x61, 0x64, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x3d, 0x0a, 0x12, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x27, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x58, 0x0a, 0x16, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x22, 0x42, 0x0a, 0x17, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x27, 0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x22, 0x5c, 0x0a, 0x06, 0x53, 0x6c, 0x6f, 0x74,
	0x49, 0x44, 0x12, 0x26, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x22, 0x3c, 0x0a, 0x19, 0x53, 0x6c, 0x6f, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x49, 0x44,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x59, 0x0a, 0x1a, 0x53, 0x6c, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e,
	0x69, 0x73, 0x6d, 0x52, 0x0a, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x73, 0x22,
	0x8a, 0x01, 0x0a, 0x14, 0x53, 0x6c, 0x6f, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53,
	0x6c, 0x6f, 0x74, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x72, 0x5f, 0x70, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x17, 0x0a, 0x15,
	0x53, 0x6c, 0x6f, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5e, 0x0a, 0x16, 0x53, 0x6c, 0x6f, 0x74, 0x4f, 0x70, 0x65,
	0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x61,
	0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x56, 0x0a, 0x15, 0x53, 0x6c, 0x6f, 0x74, 0x4f, 0x70, 0x65,
	0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x67, 0x65,
	0x64, 0x49, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x47, 0x0a,
	0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x39, 0x0a, 0x13, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x61, 0x64, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x16, 0x0a, 0x14, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x13, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x12, 0x39, 0x0a, 0x19, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x5f, 0x61, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x66, 0x66,
	0x69, 0x63, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x41, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x66, 0x69, 0x63,
	0x65, 0x72, 0x22, 0x16, 0x0a, 0x14, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x6f, 0x0a, 0x19, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x22, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x22, 0x74, 0x0a, 0x1a, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x61, 0x64,
	0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x5a, 0x0a, 0x1c, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x33, 0x0a, 0x1d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xef, 0x01, 0x0a, 0x1d,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x61, 0x64, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x26, 0x0a, 0x04, 0x6d, 0x65, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e,
	0x69, 0x73, 0x6d, 0x52, 0x04, 0x6d, 0x65, 0x63, 0x68, 0x12, 0x41, 0x0a, 0x12, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x11, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x11,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63,
	0x6b, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x10, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x7a, 0x0a,
	0x1e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2c, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x50, 0x31, 0x31, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a,
	0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x50, 0x31, 0x31, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x22, 0x9b, 0x01, 0x0a, 0x19, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x6d,
	0x65, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x61, 0x64, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x52, 0x04, 0x6d,
	0x65, 0x63, 0x68, 0x12, 0x32, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63,
	0x6b, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x5a, 0x0a, 0x08, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63,
	0x6b, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x20, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x61,
	0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x08,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x1f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x61, 0x64,
	0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x6e,
	0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x46, 0x6f, 0x75,
	0x6e, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x8f, 0x01, 0x0a,
	0x14, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x08, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x6d, 0x65, 0x63, 0x68, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4d,
	0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x52, 0x05, 0x6d, 0x65, 0x63, 0x68, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x22, 0x35,
	0x0a, 0x15, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x22, 0xb8, 0x01, 0x0a, 0x1d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x05, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00,
	0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73,
	0x22, 0x68, 0x0a, 0x19, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x21, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x61, 0x64, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x28, 0x0a, 0x05, 0x6d, 0x65, 0x63, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e,
	0x69, 0x73, 0x6d, 0x52, 0x05, 0x6d, 0x65, 0x63, 0x68, 0x73, 0x22, 0x47, 0x0a, 0x1e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x50,
	0x61, 0x72, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x14, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x09,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x05,
	0x6d, 0x65, 0x63, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x61,
	0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x52,
	0x05, 0x6d, 0x65, 0x63, 0x68, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x22, 0x36, 0x0a, 0x15, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x22, 0xb8, 0x01, 0x0a,
	0x1d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x69,
	0x74, 0x48, 0x00, 0x52, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x12,
	0x2c, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x08, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x22, 0x48, 0x0a, 0x1e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x22, 0x87, 0x01, 0x0a, 0x11, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x61, 0x64,
	0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x08, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x6d, 0x65, 0x63, 0x68, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x52, 0x05, 0x6d, 0x65, 0x63, 0x68,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x32, 0x0a, 0x12, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22,
	0xb5, 0x01, 0x0a, 0x1a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x69,
	0x74, 0x48, 0x00, 0x52, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x12,
	0x2c, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x08, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x22, 0x3b, 0x0a, 0x1b, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x13, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x09,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x05,
	0x6d, 0x65, 0x63, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x61,
	0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x52,
	0x05, 0x6d, 0x65, 0x63, 0x68, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x2c,
	0x0a, 0x14, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0xa9, 0x01, 0x0a,
	0x1c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x69, 0x74,
	0x48, 0x00, 0x52, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x12, 0x1e,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x22, 0x35, 0x0a, 0x1d, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x22,
	0xa9, 0x01, 0x0a, 0x14, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x57, 0x72, 0x61, 0x70, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0c, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x52, 0x0b, 0x77, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x28,
	0x0a, 0x05, 0x6d, 0x65, 0x63, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73,
	0x6d, 0x52, 0x05, 0x6d, 0x65, 0x63, 0x68, 0x73, 0x12, 0x31, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x5f,
	0x74, 0x6f, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x52, 0x09, 0x6b, 0x65, 0x79, 0x54, 0x6f, 0x57, 0x72, 0x61, 0x70, 0x22, 0x31, 0x0a, 0x15, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x57, 0x72, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x22, 0xc0,
	0x01, 0x0a, 0x16, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x6e, 0x77, 0x72, 0x61, 0x70, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52,
	0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x6d, 0x65, 0x63,
	0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x52, 0x05, 0x6d, 0x65,
	0x63, 0x68, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x32, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x22, 0x4c, 0x0a, 0x1a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22,
	0x1d, 0x0a, 0x1b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7d,
	0x0a, 0x17, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x70, 0x79, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52,
	0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x1a, 0x0a,
	0x18, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x70, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xcc, 0x14, 0x0a, 0x0e, 0x45, 0x78,
	0x70, 0x6f, 0x73, 0x65, 0x64, 0x50, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x33, 0x0a, 0x09,
	0x50, 0x6f, 0x73, 0x74, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x12, 0x2e, 0x70, 0x61, 0x64, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x1a, 0x12, 0x2e,
	0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x6c, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x26,
	0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x60, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x22, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70,
	0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x30,
	0x01, 0x12, 0x57, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x1f, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63,
	0x6b, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6c, 0x6f, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6c, 0x6f,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x2e, 0x70, 0x61,
	0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63,
	0x6b, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x73, 0x12, 0x22, 0x2e,
	0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x6c, 0x6f, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x11, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x6c,
	0x6f, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x2e, 0x70, 0x61,
	0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x61, 0x64,
	0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x53, 0x6c, 0x6f, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x4f,
	0x70, 0x65, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x6c, 0x6f, 0x74,
	0x4f, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x30, 0x01, 0x12, 0x42, 0x0a, 0x14, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x12, 0x2e, 0x70, 0x61,
	0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x1c, 0x2e,
	0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x61,
	0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x50, 0x75,
	0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1c, 0x2e,
	0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x61,
	0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x50, 0x75,
	0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12, 0x12,
	0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x1a, 0x1e, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x51, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x70, 0x61,
	0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x12, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x50, 0x31, 0x31, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x30, 0x01, 0x12, 0x52, 0x0a, 0x17, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x23, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e,
	0x50, 0x31, 0x31, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x6a, 0x0a, 0x19, 0x50, 0x6f, 0x73,
	0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x12, 0x25, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x1a, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x50,
	0x61, 0x69, 0x72, 0x12, 0x26, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x61,
	0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x16, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x22,
	0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x50, 0x31, 0x31,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x75, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x30, 0x01, 0x12, 0x4c, 0x0a,
	0x0b, 0x50, 0x6f, 0x73, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x1d, 0x2e, 0x70,
	0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x61,
	0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x14, 0x50,
	0x6f, 0x73, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x65, 0x64, 0x12, 0x26, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x61,
	0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x4c, 0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x74,
	0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x1d, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63,
	0x6b, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x14, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x65,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x26,
	0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44,
	0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28,
	0x01, 0x30, 0x01, 0x12, 0x43, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x12,
	0x1a, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x61,
	0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x11, 0x50, 0x6f, 0x73, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x23, 0x2e,
	0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x12, 0x49, 0x0a, 0x0a, 0x50, 0x6f,
	0x73, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x1c, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x13, 0x50, 0x6f, 0x73, 0x74, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x25, 0x2e, 0x70,
	0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x12, 0x4b, 0x0a,
	0x0a, 0x50, 0x75, 0x74, 0x57, 0x72, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x2e, 0x70, 0x61,
	0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x57, 0x72, 0x61, 0x70,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x61, 0x64,
	0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x57, 0x72, 0x61, 0x70, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x50, 0x75,
	0x74, 0x55, 0x6e, 0x77, 0x72, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x2e, 0x70, 0x61, 0x64,
	0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x6e, 0x77, 0x72, 0x61,
	0x70, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x61,
	0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x50, 0x31, 0x31, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x60, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x23, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x61,
	0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x45, 0x0a, 0x0d, 0x50, 0x75, 0x74, 0x43, 0x6f, 0x70, 0x79, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x20, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x70, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x50,
	0x31, 0x31, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x32, 0xd6, 0x13, 0x0a, 0x07, 0x50, 0x61, 0x64,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2f, 0x0a, 0x05, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x12, 0x2e,
	0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x48, 0x65, 0x6c, 0x6c,
	0x6f, 0x1a, 0x12, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x69, 0x0a, 0x16, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x26, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63,
	0x6b, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5d, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x22, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x61, 0x64,
	0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x30, 0x01, 0x12,
	0x54, 0x0a, 0x0f, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6c, 0x6f,
	0x74, 0x73, 0x12, 0x1f, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x12,
	0x53, 0x6c, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73,
	0x6d, 0x73, 0x12, 0x22, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x6c, 0x6f,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69,
	0x73, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x53,
	0x6c, 0x6f, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x2e, 0x70,
	0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x61,
	0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0f, 0x53,
	0x6c, 0x6f, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x4f, 0x70, 0x65,
	0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x4f, 0x70,
	0x65, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x30,
	0x01, 0x12, 0x3e, 0x0a, 0x10, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x65, 0x70,
	0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x12, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x4b, 0x0a, 0x0c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x12, 0x1c, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b,
	0x0a, 0x0c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1c,
	0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70,
	0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12, 0x12, 0x2e, 0x70,
	0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x1a, 0x1e, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4e, 0x0a, 0x12, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x61, 0x64,
	0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x50, 0x31, 0x31, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x30, 0x01,
	0x12, 0x4e, 0x0a, 0x13, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x23, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63,
	0x6b, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70,
	0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x50, 0x31, 0x31, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x66, 0x0a, 0x15, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x12, 0x25, 0x2e, 0x70, 0x61, 0x64, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x16, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61,
	0x69, 0x72, 0x12, 0x26, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x61, 0x64,
	0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x12, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x2e, 0x70, 0x61, 0x64, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e,
	0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x50, 0x31, 0x31, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x72, 0x0a, 0x19, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x29,
	0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x70, 0x61, 0x64, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x30, 0x01, 0x12, 0x48, 0x0a, 0x07, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x12, 0x1d, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x67, 0x0a, 0x10, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x65, 0x64, 0x12, 0x26, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x61,
	0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x48, 0x0a, 0x07, 0x44, 0x65, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x12, 0x1d, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x67, 0x0a, 0x10, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x26, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44,
	0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x3f, 0x0a, 0x04, 0x53,
	0x69, 0x67, 0x6e, 0x12, 0x1a, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0d,
	0x53, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x23, 0x2e,
	0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x12, 0x45, 0x0a, 0x06, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x12, 0x1c, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x62, 0x0a, 0x0f, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x65, 0x64, 0x12, 0x25, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x61,
	0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x28, 0x01, 0x12, 0x48, 0x0a, 0x07, 0x57, 0x72, 0x61, 0x70, 0x4b, 0x65, 0x79,
	0x12, 0x1d, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x57, 0x72, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x57, 0x72, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x40, 0x0a, 0x09, 0x55, 0x6e, 0x77, 0x72, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x2e, 0x70,
	0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x6e, 0x77,
	0x72, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e,
	0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x50, 0x31, 0x31, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x5a, 0x0a, 0x0d, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x23, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63,
	0x6b, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a,
	0x0a, 0x43, 0x6f, 0x70, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x20, 0x2e, 0x70, 0x61,
	0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x70, 0x79,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e,
	0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x50, 0x31, 0x31, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x42, 0x47, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x4c, 0x4c, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x64, 0x79, 0x2f, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63,
	0x6b, 0x2f, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x70, 0x62, 0x82, 0xd9, 0x66, 0x10, 0x40,
	0x6c, 0x6c, 0x6b, 0x64, 0x65, 0x6d, 0x6f, 0x2f, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x8a,
	0xd9, 0x66, 0x07, 0x70, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_padlock_proto_rawDescOnce sync.Once
	file_padlock_proto_rawDescData = file_padlock_proto_rawDesc
)

func file_padlock_proto_rawDescGZIP() []byte {
	file_padlock_proto_rawDescOnce.Do(func() {
		file_padlock_proto_rawDescData = protoimpl.X.CompressGZIP(file_padlock_proto_rawDescData)
	})
	return file_padlock_proto_rawDescData
}

var file_padlock_proto_msgTypes = make([]protoimpl.MessageInfo, 58)
var file_padlock_proto_goTypes = []interface{}{
	(*AuthHello)(nil),                        // 0: padlock.AuthHello
	(*AuthToken)(nil),                        // 1: padlock.AuthToken
	(*ApplicationListModulesRequest)(nil),    // 2: padlock.ApplicationListModulesRequest
	(*ApplicationListModulesResponse)(nil),   // 3: padlock.ApplicationListModulesResponse
	(*ApplicationConnectRequest)(nil),        // 4: padlock.ApplicationConnectRequest
	(*ApplicationConnectUpdate)(nil),         // 5: padlock.ApplicationConnectUpdate
	(*ModuleInfoRequest)(nil),                // 6: padlock.ModuleInfoRequest
	(*ModuleInfoResponse)(nil),               // 7: padlock.ModuleInfoResponse
	(*ModuleListSlotsRequest)(nil),           // 8: padlock.ModuleListSlotsRequest
	(*ModuleListSlotsResponse)(nil),          // 9: padlock.ModuleListSlotsResponse
	(*SlotID)(nil),                           // 10: padlock.SlotID
	(*SlotListMechanismsRequest)(nil),        // 11: padlock.SlotListMechanismsRequest
	(*SlotListMechanismsResponse)(nil),       // 12: padlock.SlotListMechanismsResponse
	(*SlotInitTokenRequest)(nil),             // 13: padlock.SlotInitTokenRequest
	(*SlotInitTokenResponse)(nil),            // 14: padlock.SlotInitTokenResponse
	(*SlotOpenSessionRequest)(nil),           // 15: padlock.SlotOpenSessionRequest
	(*SlotOpenSessionUpdate)(nil),            // 16: padlock.SlotOpenSessionUpdate
	(*SessionID)(nil),                        // 17: padlock.SessionID
	(*SessionCloseRequest)(nil),              // 18: padlock.SessionCloseRequest
	(*SessionCloseResponse)(nil),             // 19: padlock.SessionCloseResponse
	(*SessionLoginRequest)(nil),              // 20: padlock.SessionLoginRequest
	(*SessionLoginResponse)(nil),             // 21: padlock.SessionLoginResponse
	(*SessionLogoutResponse)(nil),            // 22: padlock.SessionLogoutResponse
	(*SessionListObjectsRequest)(nil),        // 23: padlock.SessionListObjectsRequest
	(*SessionCreateObjectRequest)(nil),       // 24: padlock.SessionCreateObjectRequest
	(*SessionGenerateRandomRequest)(nil),     // 25: padlock.SessionGenerateRandomRequest
	(*SessionGenerateRandomResponse)(nil),    // 26: padlock.SessionGenerateRandomResponse
	(*SessionGenerateKeyPairRequest)(nil),    // 27: padlock.SessionGenerateKeyPairRequest
	(*SessionGenerateKeyPairResponse)(nil),   // 28: padlock.SessionGenerateKeyPairResponse
	(*SessionGenerateKeyRequest)(nil),        // 29: padlock.SessionGenerateKeyRequest
	(*ObjectID)(nil),                         // 30: padlock.ObjectID
	(*ObjectListAttributeValuesRequest)(nil), // 31: padlock.ObjectListAttributeValuesRequest
	(*ObjectListAttributeValuesUpdate)(nil),  // 32: padlock.ObjectListAttributeValuesUpdate
	(*ObjectEncryptRequest)(nil),             // 33: padlock.ObjectEncryptRequest
	(*ObjectEncryptResponse)(nil),            // 34: padlock.ObjectEncryptResponse
	(*ObjectEncryptSegmentedRequest)(nil),    // 35: padlock.ObjectEncryptSegmentedRequest
	(*ObjectCryptoSegmentedInit)(nil),        // 36: padlock.ObjectCryptoSegmentedInit
	(*ObjectEncryptSegmentedResponse)(nil),   // 37: padlock.ObjectEncryptSegmentedResponse
	(*ObjectDecryptRequest)(nil),             // 38: padlock.ObjectDecryptRequest
	(*ObjectDecryptResponse)(nil),            // 39: padlock.ObjectDecryptResponse
	(*ObjectDecryptSegmentedRequest)(nil),    // 40: padlock.ObjectDecryptSegmentedRequest
	(*ObjectDecryptSegmentedResponse)(nil),   // 41: padlock.ObjectDecryptSegmentedResponse
	(*ObjectSignRequest)(nil),                // 42: padlock.ObjectSignRequest
	(*ObjectSignResponse)(nil),               // 43: padlock.ObjectSignResponse
	(*ObjectSignSegmentedRequest)(nil),       // 44: padlock.ObjectSignSegmentedRequest
	(*ObjectSignSegmentedResponse)(nil),      // 45: padlock.ObjectSignSegmentedResponse
	(*ObjectVerifyRequest)(nil),              // 46: padlock.ObjectVerifyRequest
	(*ObjectVerifyResponse)(nil),             // 47: padlock.ObjectVerifyResponse
	(*ObjectVerifySegmentedRequest)(nil),     // 48: padlock.ObjectVerifySegmentedRequest
	(*ObjectVerifySegmentedResponse)(nil),    // 49: padlock.ObjectVerifySegmentedResponse
	(*ObjectWrapKeyRequest)(nil),             // 50: padlock.ObjectWrapKeyRequest
	(*ObjectWrapKeyResponse)(nil),            // 51: padlock.ObjectWrapKeyResponse
	(*ObjectUnwrapKeyRequest)(nil),           // 52: padlock.ObjectUnwrapKeyRequest
	(*ObjectDestroyObjectRequest)(nil),       // 53: padlock.ObjectDestroyObjectRequest
	(*ObjectDestroyObjectResponse)(nil),      // 54: padlock.ObjectDestroyObjectResponse
	(*ObjectCopyObjectRequest)(nil),          // 55: padlock.ObjectCopyObjectRequest
	(*ObjectCopyObjectResponse)(nil),         // 56: padlock.ObjectCopyObjectResponse
	nil,                                      // 57: padlock.ApplicationListModulesResponse.ModulesEntry
	(*ModuleInfo)(nil),                       // 58: padlock.ModuleInfo
	(*SlotInfo)(nil),                         // 59: padlock.SlotInfo
	(*SupportedMechanism)(nil),               // 60: padlock.SupportedMechanism
	(*Attribute)(nil),                        // 61: padlock.Attribute
	(*Mechanism)(nil),                        // 62: padlock.Mechanism
	(*P11Object)(nil),                        // 63: padlock.P11Object
	(AttributeType)(0),                       // 64: padlock.AttributeType
	(*empty.Empty)(nil),                      // 65: google.protobuf.Empty
}
var file_padlock_proto_depIdxs = []int32{
	1,   // 0: padlock.ApplicationListModulesRequest.auth:type_name -> padlock.AuthToken
	57,  // 1: padlock.ApplicationListModulesResponse.modules:type_name -> padlock.ApplicationListModulesResponse.ModulesEntry
	1,   // 2: padlock.ApplicationConnectRequest.auth:type_name -> padlock.AuthToken
	58,  // 3: padlock.ApplicationConnectUpdate.info:type_name -> padlock.ModuleInfo
	9,   // 4: padlock.ApplicationConnectUpdate.changed_slots:type_name -> padlock.ModuleListSlotsResponse
	1,   // 5: padlock.ModuleInfoRequest.auth:type_name -> padlock.AuthToken
	58,  // 6: padlock.ModuleInfoResponse.info:type_name -> padlock.ModuleInfo
	1,   // 7: padlock.ModuleListSlotsRequest.auth:type_name -> padlock.AuthToken
	59,  // 8: padlock.ModuleListSlotsResponse.slots:type_name -> padlock.SlotInfo
	1,   // 9: padlock.SlotID.auth:type_name -> padlock.AuthToken
	10,  // 10: padlock.SlotListMechanismsRequest.id:type_name -> padlock.SlotID
	60,  // 11: padlock.SlotListMechanismsResponse.mechanisms:type_name -> padlock.SupportedMechanism
	10,  // 12: padlock.SlotInitTokenRequest.id:type_name -> padlock.SlotID
	10,  // 13: padlock.SlotOpenSessionRequest.id:type_name -> padlock.SlotID
	1,   // 14: padlock.SessionID.auth:type_name -> padlock.AuthToken
	17,  // 15: padlock.SessionCloseRequest.id:type_name -> padlock.SessionID
	17,  // 16: padlock.SessionLoginRequest.id:type_name -> padlock.SessionID
	17,  // 17: padlock.SessionListObjectsRequest.id:type_name -> padlock.SessionID
	61,  // 18: padlock.SessionListObjectsRequest.template:type_name -> padlock.Attribute
	17,  // 19: padlock.SessionCreateObjectRequest.id:type_name -> padlock.SessionID
	61,  // 20: padlock.SessionCreateObjectRequest.attributes:type_name -> padlock.Attribute
	17,  // 21: padlock.SessionGenerateRandomRequest.id:type_name -> padlock.SessionID
	17,  // 22: padlock.SessionGenerateKeyPairRequest.id:type_name -> padlock.SessionID
	62,  // 23: padlock.SessionGenerateKeyPairRequest.mech:type_name -> padlock.Mechanism
	61,  // 24: padlock.SessionGenerateKeyPairRequest.private_attributes:type_name -> padlock.Attribute
	61,  // 25: padlock.SessionGenerateKeyPairRequest.public_attributes:type_name -> padlock.Attribute
	63,  // 26: padlock.SessionGenerateKeyPairResponse.private:type_name -> padlock.P11Object
	63,  // 27: padlock.SessionGenerateKeyPairResponse.public:type_name -> padlock.P11Object
	17,  // 28: padlock.SessionGenerateKeyRequest.id:type_name -> padlock.SessionID
	62,  // 29: padlock.SessionGenerateKeyRequest.mech:type_name -> padlock.Mechanism
	61,  // 30: padlock.SessionGenerateKeyRequest.attributes:type_name -> padlock.Attribute
	17,  // 31: padlock.ObjectID.session_id:type_name -> padlock.SessionID
	30,  // 32: padlock.ObjectListAttributeValuesRequest.object_id:type_name -> padlock.ObjectID
	64,  // 33: padlock.ObjectListAttributeValuesRequest.requested_attributes:type_name -> padlock.AttributeType
	61,  // 34: padlock.ObjectListAttributeValuesUpdate.attribute:type_name -> padlock.Attribute
	64,  // 35: padlock.ObjectListAttributeValuesUpdate.not_found:type_name -> padlock.AttributeType
	30,  // 36: padlock.ObjectEncryptRequest.object_id:type_name -> padlock.ObjectID
	62,  // 37: padlock.ObjectEncryptRequest.mechs:type_name -> padlock.Mechanism
	36,  // 38: padlock.ObjectEncryptSegmentedRequest.first:type_name -> padlock.ObjectCryptoSegmentedInit
	65,  // 39: padlock.ObjectEncryptSegmentedRequest.last:type_name -> google.protobuf.Empty
	30,  // 40: padlock.ObjectCryptoSegmentedInit.id:type_name -> padlock.ObjectID
	62,  // 41: padlock.ObjectCryptoSegmentedInit.mechs:type_name -> padlock.Mechanism
	30,  // 42: padlock.ObjectDecryptRequest.object_id:type_name -> padlock.ObjectID
	62,  // 43: padlock.ObjectDecryptRequest.mechs:type_name -> padlock.Mechanism
	36,  // 44: padlock.ObjectDecryptSegmentedRequest.first:type_name -> padlock.ObjectCryptoSegmentedInit
	65,  // 45: padlock.ObjectDecryptSegmentedRequest.last:type_name -> google.protobuf.Empty
	30,  // 46: padlock.ObjectSignRequest.object_id:type_name -> padlock.ObjectID
	62,  // 47: padlock.ObjectSignRequest.mechs:type_name -> padlock.Mechanism
	36,  // 48: padlock.ObjectSignSegmentedRequest.first:type_name -> padlock.ObjectCryptoSegmentedInit
	65,  // 49: padlock.ObjectSignSegmentedRequest.last:type_name -> google.protobuf.Empty
	30,  // 50: padlock.ObjectVerifyRequest.object_id:type_name -> padlock.ObjectID
	62,  // 51: padlock.ObjectVerifyRequest.mechs:type_name -> padlock.Mechanism
	36,  // 52: padlock.ObjectVerifySegmentedRequest.first:type_name -> padlock.ObjectCryptoSegmentedInit
	30,  // 53: padlock.ObjectWrapKeyRequest.wrapping_key:type_name -> padlock.ObjectID
	62,  // 54: padlock.ObjectWrapKeyRequest.mechs:type_name -> padlock.Mechanism
	30,  // 55: padlock.ObjectWrapKeyRequest.key_to_wrap:type_name -> padlock.ObjectID
	30,  // 56: padlock.ObjectUnwrapKeyRequest.object_id:type_name -> padlock.ObjectID
	62,  // 57: padlock.ObjectUnwrapKeyRequest.mechs:type_name -> padlock.Mechanism
	61,  // 58: padlock.ObjectUnwrapKeyRequest.attributes:type_name -> padlock.Attribute
	30,  // 59: padlock.ObjectDestroyObjectRequest.object_id:type_name -> padlock.ObjectID
	30,  // 60: padlock.ObjectCopyObjectRequest.object_id:type_name -> padlock.ObjectID
	61,  // 61: padlock.ObjectCopyObjectRequest.attributes:type_name -> padlock.Attribute
	58,  // 62: padlock.ApplicationListModulesResponse.ModulesEntry.value:type_name -> padlock.ModuleInfo
	0,   // 63: padlock.ExposedPadlock.PostHello:input_type -> padlock.AuthHello
	2,   // 64: padlock.ExposedPadlock.GetApplicationListModules:input_type -> padlock.ApplicationListModulesRequest
	4,   // 65: padlock.ExposedPadlock.GetApplicationConnect:input_type -> padlock.ApplicationConnectRequest
	8,   // 66: padlock.ExposedPadlock.GetModuleListSlots:input_type -> padlock.ModuleListSlotsRequest
	6,   // 67: padlock.ExposedPadlock.GetModuleInfo:input_type -> padlock.ModuleInfoRequest
	11,  // 68: padlock.ExposedPadlock.GetSlotListMechanisms:input_type -> padlock.SlotListMechanismsRequest
	13,  // 69: padlock.ExposedPadlock.PostSlotInitToken:input_type -> padlock.SlotInitTokenRequest
	15,  // 70: padlock.ExposedPadlock.GetSlotOpenSession:input_type -> padlock.SlotOpenSessionRequest
	17,  // 71: padlock.ExposedPadlock.PostSessionKeepAlive:input_type -> padlock.SessionID
	18,  // 72: padlock.ExposedPadlock.DeleteSessionClose:input_type -> padlock.SessionCloseRequest
	20,  // 73: padlock.ExposedPadlock.PutSessionLogin:input_type -> padlock.SessionLoginRequest
	17,  // 74: padlock.ExposedPadlock.PutSessionLogout:input_type -> padlock.SessionID
	23,  // 75: padlock.ExposedPadlock.GetSessionListObjects:input_type -> padlock.SessionListObjectsRequest
	24,  // 76: padlock.ExposedPadlock.PostSessionCreateObject:input_type -> padlock.SessionCreateObjectRequest
	25,  // 77: padlock.ExposedPadlock.PostSessionGenerateRandom:input_type -> padlock.SessionGenerateRandomRequest
	27,  // 78: padlock.ExposedPadlock.PostSessionGenerateKeyPair:input_type -> padlock.SessionGenerateKeyPairRequest
	29,  // 79: padlock.ExposedPadlock.PostSessionGenerateKey:input_type -> padlock.SessionGenerateKeyRequest
	31,  // 80: padlock.ExposedPadlock.GetObjectListAttributeValues:input_type -> padlock.ObjectListAttributeValuesRequest
	33,  // 81: padlock.ExposedPadlock.PostEncrypt:input_type -> padlock.ObjectEncryptRequest
	35,  // 82: padlock.ExposedPadlock.PostEncryptSegmented:input_type -> padlock.ObjectEncryptSegmentedRequest
	38,  // 83: padlock.ExposedPadlock.PostDecrypt:input_type -> padlock.ObjectDecryptRequest
	40,  // 84: padlock.ExposedPadlock.PostDecryptSegmented:input_type -> padlock.ObjectDecryptSegmentedRequest
	42,  // 85: padlock.ExposedPadlock.PostSign:input_type -> padlock.ObjectSignRequest
	44,  // 86: padlock.ExposedPadlock.PostSignSegmented:input_type -> padlock.ObjectSignSegmentedRequest
	46,  // 87: padlock.ExposedPadlock.PostVerify:input_type -> padlock.ObjectVerifyRequest
	48,  // 88: padlock.ExposedPadlock.PostVerifySegmented:input_type -> padlock.ObjectVerifySegmentedRequest
	50,  // 89: padlock.ExposedPadlock.PutWrapKey:input_type -> padlock.ObjectWrapKeyRequest
	52,  // 90: padlock.ExposedPadlock.PutUnwrapKey:input_type -> padlock.ObjectUnwrapKeyRequest
	53,  // 91: padlock.ExposedPadlock.DeleteDestroyObject:input_type -> padlock.ObjectDestroyObjectRequest
	55,  // 92: padlock.ExposedPadlock.PutCopyObject:input_type -> padlock.ObjectCopyObjectRequest
	0,   // 93: padlock.Padlock.Hello:input_type -> padlock.AuthHello
	2,   // 94: padlock.Padlock.ApplicationListModules:input_type -> padlock.ApplicationListModulesRequest
	4,   // 95: padlock.Padlock.ApplicationConnect:input_type -> padlock.ApplicationConnectRequest
	8,   // 96: padlock.Padlock.ModuleListSlots:input_type -> padlock.ModuleListSlotsRequest
	6,   // 97: padlock.Padlock.ModuleInfo:input_type -> padlock.ModuleInfoRequest
	11,  // 98: padlock.Padlock.SlotListMechanisms:input_type -> padlock.SlotListMechanismsRequest
	13,  // 99: padlock.Padlock.SlotInitToken:input_type -> padlock.SlotInitTokenRequest
	15,  // 100: padlock.Padlock.SlotOpenSession:input_type -> padlock.SlotOpenSessionRequest
	17,  // 101: padlock.Padlock.SessionKeepAlive:input_type -> padlock.SessionID
	18,  // 102: padlock.Padlock.SessionClose:input_type -> padlock.SessionCloseRequest
	20,  // 103: padlock.Padlock.SessionLogin:input_type -> padlock.SessionLoginRequest
	17,  // 104: padlock.Padlock.SessionLogout:input_type -> padlock.SessionID
	23,  // 105: padlock.Padlock.SessionListObjects:input_type -> padlock.SessionListObjectsRequest
	24,  // 106: padlock.Padlock.SessionCreateObject:input_type -> padlock.SessionCreateObjectRequest
	25,  // 107: padlock.Padlock.SessionGenerateRandom:input_type -> padlock.SessionGenerateRandomRequest
	27,  // 108: padlock.Padlock.SessionGenerateKeyPair:input_type -> padlock.SessionGenerateKeyPairRequest
	29,  // 109: padlock.Padlock.SessionGenerateKey:input_type -> padlock.SessionGenerateKeyRequest
	31,  // 110: padlock.Padlock.ObjectListAttributeValues:input_type -> padlock.ObjectListAttributeValuesRequest
	33,  // 111: padlock.Padlock.Encrypt:input_type -> padlock.ObjectEncryptRequest
	35,  // 112: padlock.Padlock.EncryptSegmented:input_type -> padlock.ObjectEncryptSegmentedRequest
	38,  // 113: padlock.Padlock.Decrypt:input_type -> padlock.ObjectDecryptRequest
	40,  // 114: padlock.Padlock.DecryptSegmented:input_type -> padlock.ObjectDecryptSegmentedRequest
	42,  // 115: padlock.Padlock.Sign:input_type -> padlock.ObjectSignRequest
	44,  // 116: padlock.Padlock.SignSegmented:input_type -> padlock.ObjectSignSegmentedRequest
	46,  // 117: padlock.Padlock.Verify:input_type -> padlock.ObjectVerifyRequest
	48,  // 118: padlock.Padlock.VerifySegmented:input_type -> padlock.ObjectVerifySegmentedRequest
	50,  // 119: padlock.Padlock.WrapKey:input_type -> padlock.ObjectWrapKeyRequest
	52,  // 120: padlock.Padlock.UnwrapKey:input_type -> padlock.ObjectUnwrapKeyRequest
	53,  // 121: padlock.Padlock.DestroyObject:input_type -> padlock.ObjectDestroyObjectRequest
	55,  // 122: padlock.Padlock.CopyObject:input_type -> padlock.ObjectCopyObjectRequest
	1,   // 123: padlock.ExposedPadlock.PostHello:output_type -> padlock.AuthToken
	3,   // 124: padlock.ExposedPadlock.GetApplicationListModules:output_type -> padlock.ApplicationListModulesResponse
	5,   // 125: padlock.ExposedPadlock.GetApplicationConnect:output_type -> padlock.ApplicationConnectUpdate
	9,   // 126: padlock.ExposedPadlock.GetModuleListSlots:output_type -> padlock.ModuleListSlotsResponse
	7,   // 127: padlock.ExposedPadlock.GetModuleInfo:output_type -> padlock.ModuleInfoResponse
	12,  // 128: padlock.ExposedPadlock.GetSlotListMechanisms:output_type -> padlock.SlotListMechanismsResponse
	14,  // 129: padlock.ExposedPadlock.PostSlotInitToken:output_type -> padlock.SlotInitTokenResponse
	16,  // 130: padlock.ExposedPadlock.GetSlotOpenSession:output_type -> padlock.SlotOpenSessionUpdate
	65,  // 131: padlock.ExposedPadlock.PostSessionKeepAlive:output_type -> google.protobuf.Empty
	19,  // 132: padlock.ExposedPadlock.DeleteSessionClose:output_type -> padlock.SessionCloseResponse
	21,  // 133: padlock.ExposedPadlock.PutSessionLogin:output_type -> padlock.SessionLoginResponse
	22,  // 134: padlock.ExposedPadlock.PutSessionLogout:output_type -> padlock.SessionLogoutResponse
	63,  // 135: padlock.ExposedPadlock.GetSessionListObjects:output_type -> padlock.P11Object
	63,  // 136: padlock.ExposedPadlock.PostSessionCreateObject:output_type -> padlock.P11Object
	26,  // 137: padlock.ExposedPadlock.PostSessionGenerateRandom:output_type -> padlock.SessionGenerateRandomResponse
	28,  // 138: padlock.ExposedPadlock.PostSessionGenerateKeyPair:output_type -> padlock.SessionGenerateKeyPairResponse
	63,  // 139: padlock.ExposedPadlock.PostSessionGenerateKey:output_type -> padlock.P11Object
	32,  // 140: padlock.ExposedPadlock.GetObjectListAttributeValues:output_type -> padlock.ObjectListAttributeValuesUpdate
	34,  // 141: padlock.ExposedPadlock.PostEncrypt:output_type -> padlock.ObjectEncryptResponse
	37,  // 142: padlock.ExposedPadlock.PostEncryptSegmented:output_type -> padlock.ObjectEncryptSegmentedResponse
	39,  // 143: padlock.ExposedPadlock.PostDecrypt:output_type -> padlock.ObjectDecryptResponse
	41,  // 144: padlock.ExposedPadlock.PostDecryptSegmented:output_type -> padlock.ObjectDecryptSegmentedResponse
	43,  // 145: padlock.ExposedPadlock.PostSign:output_type -> padlock.ObjectSignResponse
	45,  // 146: padlock.ExposedPadlock.PostSignSegmented:output_type -> padlock.ObjectSignSegmentedResponse
	47,  // 147: padlock.ExposedPadlock.PostVerify:output_type -> padlock.ObjectVerifyResponse
	49,  // 148: padlock.ExposedPadlock.PostVerifySegmented:output_type -> padlock.ObjectVerifySegmentedResponse
	51,  // 149: padlock.ExposedPadlock.PutWrapKey:output_type -> padlock.ObjectWrapKeyResponse
	63,  // 150: padlock.ExposedPadlock.PutUnwrapKey:output_type -> padlock.P11Object
	54,  // 151: padlock.ExposedPadlock.DeleteDestroyObject:output_type -> padlock.ObjectDestroyObjectResponse
	63,  // 152: padlock.ExposedPadlock.PutCopyObject:output_type -> padlock.P11Object
	1,   // 153: padlock.Padlock.Hello:output_type -> padlock.AuthToken
	3,   // 154: padlock.Padlock.ApplicationListModules:output_type -> padlock.ApplicationListModulesResponse
	5,   // 155: padlock.Padlock.ApplicationConnect:output_type -> padlock.ApplicationConnectUpdate
	9,   // 156: padlock.Padlock.ModuleListSlots:output_type -> padlock.ModuleListSlotsResponse
	7,   // 157: padlock.Padlock.ModuleInfo:output_type -> padlock.ModuleInfoResponse
	12,  // 158: padlock.Padlock.SlotListMechanisms:output_type -> padlock.SlotListMechanismsResponse
	14,  // 159: padlock.Padlock.SlotInitToken:output_type -> padlock.SlotInitTokenResponse
	16,  // 160: padlock.Padlock.SlotOpenSession:output_type -> padlock.SlotOpenSessionUpdate
	65,  // 161: padlock.Padlock.SessionKeepAlive:output_type -> google.protobuf.Empty
	19,  // 162: padlock.Padlock.SessionClose:output_type -> padlock.SessionCloseResponse
	21,  // 163: padlock.Padlock.SessionLogin:output_type -> padlock.SessionLoginResponse
	22,  // 164: padlock.Padlock.SessionLogout:output_type -> padlock.SessionLogoutResponse
	63,  // 165: padlock.Padlock.SessionListObjects:output_type -> padlock.P11Object
	63,  // 166: padlock.Padlock.SessionCreateObject:output_type -> padlock.P11Object
	26,  // 167: padlock.Padlock.SessionGenerateRandom:output_type -> padlock.SessionGenerateRandomResponse
	28,  // 168: padlock.Padlock.SessionGenerateKeyPair:output_type -> padlock.SessionGenerateKeyPairResponse
	63,  // 169: padlock.Padlock.SessionGenerateKey:output_type -> padlock.P11Object
	32,  // 170: padlock.Padlock.ObjectListAttributeValues:output_type -> padlock.ObjectListAttributeValuesUpdate
	34,  // 171: padlock.Padlock.Encrypt:output_type -> padlock.ObjectEncryptResponse
	37,  // 172: padlock.Padlock.EncryptSegmented:output_type -> padlock.ObjectEncryptSegmentedResponse
	39,  // 173: padlock.Padlock.Decrypt:output_type -> padlock.ObjectDecryptResponse
	41,  // 174: padlock.Padlock.DecryptSegmented:output_type -> padlock.ObjectDecryptSegmentedResponse
	43,  // 175: padlock.Padlock.Sign:output_type -> padlock.ObjectSignResponse
	45,  // 176: padlock.Padlock.SignSegmented:output_type -> padlock.ObjectSignSegmentedResponse
	47,  // 177: padlock.Padlock.Verify:output_type -> padlock.ObjectVerifyResponse
	49,  // 178: padlock.Padlock.VerifySegmented:output_type -> padlock.ObjectVerifySegmentedResponse
	51,  // 179: padlock.Padlock.WrapKey:output_type -> padlock.ObjectWrapKeyResponse
	63,  // 180: padlock.Padlock.UnwrapKey:output_type -> padlock.P11Object
	54,  // 181: padlock.Padlock.DestroyObject:output_type -> padlock.ObjectDestroyObjectResponse
	63,  // 182: padlock.Padlock.CopyObject:output_type -> padlock.P11Object
	123, // [123:183] is the sub-list for method output_type
	63,  // [63:123] is the sub-list for method input_type
	63,  // [63:63] is the sub-list for extension type_name
	63,  // [63:63] is the sub-list for extension extendee
	0,   // [0:63] is the sub-list for field type_name
}

func init() { file_padlock_proto_init() }
func file_padlock_proto_init() {
	if File_padlock_proto != nil {
		return
	}
	file_attributes_proto_init()
	file_pkcs11_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_padlock_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthHello); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationListModulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationListModulesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationConnectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationConnectUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleListSlotsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleListSlotsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlotID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlotListMechanismsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlotListMechanismsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlotInitTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlotInitTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlotOpenSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlotOpenSessionUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionCloseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionCloseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionLoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionLogoutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionListObjectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionCreateObjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionGenerateRandomRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionGenerateRandomResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionGenerateKeyPairRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionGenerateKeyPairResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionGenerateKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectListAttributeValuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectListAttributeValuesUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectEncryptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectEncryptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectEncryptSegmentedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectCryptoSegmentedInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectEncryptSegmentedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectDecryptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectDecryptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectDecryptSegmentedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectDecryptSegmentedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectSignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectSignResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectSignSegmentedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectSignSegmentedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectVerifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectVerifyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectVerifySegmentedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectVerifySegmentedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectWrapKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectWrapKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectUnwrapKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectDestroyObjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectDestroyObjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectCopyObjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_padlock_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectCopyObjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_padlock_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*ApplicationConnectUpdate_Info)(nil),
		(*ApplicationConnectUpdate_ChangedSlots)(nil),
	}
	file_padlock_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*SlotOpenSessionUpdate_Uuid)(nil),
		(*SlotOpenSessionUpdate_LoggedIn)(nil),
	}
	file_padlock_proto_msgTypes[32].OneofWrappers = []interface{}{
		(*ObjectListAttributeValuesUpdate_Attribute)(nil),
		(*ObjectListAttributeValuesUpdate_NotFound)(nil),
	}
	file_padlock_proto_msgTypes[35].OneofWrappers = []interface{}{
		(*ObjectEncryptSegmentedRequest_First)(nil),
		(*ObjectEncryptSegmentedRequest_MessagePart)(nil),
		(*ObjectEncryptSegmentedRequest_Last)(nil),
	}
	file_padlock_proto_msgTypes[40].OneofWrappers = []interface{}{
		(*ObjectDecryptSegmentedRequest_First)(nil),
		(*ObjectDecryptSegmentedRequest_MessagePart)(nil),
		(*ObjectDecryptSegmentedRequest_Last)(nil),
	}
	file_padlock_proto_msgTypes[44].OneofWrappers = []interface{}{
		(*ObjectSignSegmentedRequest_First)(nil),
		(*ObjectSignSegmentedRequest_MessagePart)(nil),
		(*ObjectSignSegmentedRequest_Last)(nil),
	}
	file_padlock_proto_msgTypes[48].OneofWrappers = []interface{}{
		(*ObjectVerifySegmentedRequest_First)(nil),
		(*ObjectVerifySegmentedRequest_MessagePart)(nil),
		(*ObjectVerifySegmentedRequest_Signature)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_padlock_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   58,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_padlock_proto_goTypes,
		DependencyIndexes: file_padlock_proto_depIdxs,
		MessageInfos:      file_padlock_proto_msgTypes,
	}.Build()
	File_padlock_proto = out.File
	file_padlock_proto_rawDesc = nil
	file_padlock_proto_goTypes = nil
	file_padlock_proto_depIdxs = nil
}
